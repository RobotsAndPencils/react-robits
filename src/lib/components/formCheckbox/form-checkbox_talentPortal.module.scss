@import '../../styles/themes/talentPortal/tokens';

$form-checkbox-indicator-border-radius: 2px !default;
$form-checkbox-indicator-transition: transform $transition-duration $ease-in-out-circ,
  border $transition-duration $ease-in-out-circ !default;

$custom-checkbox-indicator-indeterminate-bg: $component-active-bg !default;
$custom-checkbox-indicator-indeterminate-color: $custom-control-indicator-checked-color !default;
$custom-checkbox-indicator-icon-indeterminate: str-replace(
  url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3E%3Cpath stroke='#{$custom-checkbox-indicator-indeterminate-color}' d='M0 2h4'/%3E%3C/svg%3E"),
  '#',
  '%23'
) !default;
$custom-checkbox-indicator-indeterminate-box-shadow: none !default;

// Custom toggle
$custom-toggle-width: 5rem !default;
$custom-toggle-height: 2.8rem !default;
$custom-toggle-border-width: 0.1rem !default;
$custom-toggle-border: $custom-toggle-border-width solid $form-control-border-color !default;
$custom-toggle-border-radius: 100px !default;

$custom-toggle-focus-box-shadow: 0 0.5008rem 1.1504rem rgba($success, 0.1),
  0 0.2496rem 0.2rem rgba($black, 0.06) !default;

$custom-toggle-checked-background: $primary !default;
$custom-toggle-checked-border-color: $custom-toggle-checked-background !default;
$custom-toggle-checked-knob-background: $white !default;

$custom-toggle-knob-width: 2rem !default;
$custom-toggle-knob-height: 2rem !default;
$custom-toggle-knob-border-radius: 10rem !default;
$custom-toggle-knob-active-width: 2.6rem !default;

$custom-toggle-width-sm: 3.5rem !default;
$custom-toggle-height-sm: 1.8rem !default;
$custom-toggle-knob-width-sm: 1.2rem !default;
$custom-toggle-knob-active-width-sm: 1.6rem !default;
$custom-toggle-knob-height-sm: 1.2rem !default;

@mixin toggle-variant($parent, $color) {
  #{$parent} {
    label {
      // Background
      &::before {
        background: $color;
        border-color: $color;
      }

      // Knob
      &::after {
        background: color-yiq($color);
      }
    }
  }
}

.checkbox-container {
  display: flex;
  align-items: center;
}

.form-checkbox {
  position: relative;
  display: inline-flex;
  align-items: center;
  min-height: (1rem * $line-height-base);
  padding-left: $custom-control-gutter;

  &:hover:not(.disabled) {
    cursor: pointer;

    label::before {
      border-color: $form-control-hover-border-color;
    }
  }

  input {
    position: absolute;
    z-index: -1; // Put the input behind the label so it doesn't overlay text
    opacity: 0;
    margin: 0;

    &:checked ~ label {
      &::before {
        color: $custom-control-indicator-checked-color;
        border-color: transparent;
        background-color: $custom-control-indicator-checked-bg;
        background-image: none;
      }

      &::after {
        opacity: 1;
        transform: rotate(45deg) scale(1);
      }
    }

    &:focus ~ label::before {
      box-shadow: $form-control-focus-box-shadow;
    }

    &:active ~ label::before {
      color: $custom-control-indicator-active-color;
      background-color: $custom-control-indicator-active-bg;
      box-shadow: $custom-control-indicator-active-box-shadow;
    }

    &:disabled {
      ~ label {
        cursor: not-allowed;

        &::before {
          background-color: $form-control-disabled-bg;
        }
      }

      ~ .description {
        cursor: not-allowed;
      }

      &:checked ~ label {
        &::before {
          background: $form-control-disabled-bg;
          border-color: $border-color;
        }

        &::after {
          border-color: $border-color;
        }
      }
    }

    &:indeterminate ~ label {
      &::before {
        border: none;
        background-color: $custom-checkbox-indicator-indeterminate-bg;
        box-shadow: $custom-checkbox-indicator-indeterminate-box-shadow;
      }

      &::after {
        content: '';
        position: absolute;
        transform: scale(1);
        background-image: $custom-checkbox-indicator-icon-indeterminate;
        background-color: $white;
        border: none;
        width: 10px;
        height: 2px;
        top: 11px;
        left: 4px;
        opacity: 1;
        transition: none;
      }
    }
  }

  label {
    position: static;
    margin-bottom: 0;
    cursor: pointer;

    // Background-color and (when enabled) gradient
    &::before {
      box-sizing: border-box;
      position: absolute;
      display: block;
      pointer-events: all;
      content: '';
      user-select: none;
      top: (($line-height-base - $custom-control-indicator-size) / 2);
      left: 0;
      width: $custom-control-indicator-size;
      height: $custom-control-indicator-size;
      background-color: $form-control-bg;
      border: $custom-control-indicator-border;
      transition: all 250ms cubic-bezier(0.27, 0.01, 0.38, 1.06);
      border-radius: $form-checkbox-indicator-border-radius;
    }

    // Foreground (icon)
    &::after {
      box-sizing: border-box;
      position: absolute;
      display: block;
      content: '';
      background-repeat: no-repeat;
      background-position: center center;

      content: '';
      top: 5px;
      left: 7px;
      width: 5px;
      height: 11px;
      opacity: 0;
      transform: rotate(45deg) scale(0);
      border-right: 2px solid $white;
      border-bottom: 2px solid $white;
      transition: $form-checkbox-indicator-transition;
      transition-delay: 100ms;
    }
  }
}

.inline {
  display: inline-block;
  margin-right: $custom-control-spacer-x;
}

.left-label {
  margin-right: 1rem;
}

.as-toggle {
  position: relative;
  padding-left: ($custom-toggle-width + 1rem);
  min-height: $custom-toggle-height;

  @each $color, $value in $grays {
    @include toggle-variant('&.left-#{$color}', $value);
  }
  @each $color, $value in $colors {
    @include toggle-variant('&.left-#{$color}', $value);
  }
  @each $color, $value in $theme-colors {
    @include toggle-variant('&.left-#{$color}', $value);
  }

  label {
    // Background
    &::before {
      position: absolute;
      top: 0;
      left: 0;
      display: block;
      width: $custom-toggle-width;
      height: $custom-toggle-height;
      background: $form-control-bg;
      border-radius: $custom-toggle-border-radius;
      border: $custom-toggle-border;
    }

    // Knob
    &::after {
      content: '';
      position: absolute;
      top: 0.4rem;
      left: 0.4rem;
      width: $custom-toggle-knob-width;
      height: $custom-toggle-knob-height;
      background: $form-control-border-color;
      border-radius: $custom-toggle-knob-border-radius;
      transition: 350ms;
      opacity: 1;
      transform: none;
      border: none;
    }
  }

  input {
    // Checked state
    &:checked ~ label {
      // Background
      &::before {
        background: $custom-toggle-checked-background;
        border-color: $custom-toggle-checked-border-color;
      }

      // Knob
      &::after {
        left: $custom-toggle-width - $custom-toggle-border-width - 0.3rem;
        transform: translateX(-100%);
        background: $custom-toggle-checked-knob-background;
      }
    }

    // Disabled and checked state
    &:checked:disabled ~ label {
      &::before {
        background: $form-control-disabled-bg;
        border-color: $border-color;
      }

      &::after {
        background: $border-color;
      }
    }

    // Active state
    &:active:not(:disabled) ~ label {
      // Knob
      &::after {
        width: $custom-toggle-knob-active-width;
      }
    }

    // Active, but not checked.
    &:active:not(:checked) ~ label {
      &::before {
        background-color: $form-control-bg;
      }
    }

    // Disabled and active.
    &:disabled:active ~ label {
      &::before {
        background-color: $form-control-disabled-bg;
      }
    }

    // Focus state
    &:focus {
      & ~ label {
        &::before {
          box-shadow: $custom-toggle-focus-box-shadow;
        }
      }

      &:not(:checked) ~ label {
        &::before {
          box-shadow: $form-control-focus-box-shadow;
        }
      }
    }
  }

  &.smaller {
    padding-left: 4.2rem;

    label {
      // Background
      &::before {
        top: 0.3rem;
        position: absolute;
        display: block;
        width: $custom-toggle-width-sm;
        height: $custom-toggle-height-sm;
        background: $form-control-bg;
        border-radius: $custom-toggle-border-radius;
        border: $custom-toggle-border;
      }

      // Knob
      &::after {
        content: '';
        position: absolute;
        top: 0.6rem;
        left: 0.3rem;
        width: $custom-toggle-knob-width-sm;
        height: $custom-toggle-knob-height-sm;
      }
    }

    // Checked state
    input:checked ~ label {
      // Knob
      &::after {
        left: $custom-toggle-width-sm - $custom-toggle-border-width - 0.3rem;
      }
    }

    // Active state
    input:active:not(:disabled) ~ label {
      // Knob
      &::after {
        width: $custom-toggle-knob-active-width-sm;
      }
    }
  }

  & ~ :global(.form-control-descenders) {
    .form-control-required,
    .form-control-error {
      margin-left: ($custom-toggle-width + 1rem);
    }
  }
}

:global {
  .form-control-required,
  .form-control-error {
    margin: 0 0.8rem 0.8rem $custom-control-gutter;
  }
}

@include form-validation-state('valid', $success);
@include form-validation-state('invalid', $danger);
