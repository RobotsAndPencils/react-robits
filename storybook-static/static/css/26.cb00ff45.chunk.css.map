{"version":3,"file":"static/css/26.cb00ff45.chunk.css","sources":["webpack:///formSelect_talentPortal.module.scss"],"sourcesContent":["$white: #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #868e96 !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black: #000 !default;\n\n$grays: () !default;\n$grays: map-merge(\n  (\n    '100': $gray-100,\n    '200': $gray-200,\n    '300': $gray-300,\n    '400': $gray-400,\n    '500': $gray-500,\n    '600': $gray-600,\n    '700': $gray-700,\n    '800': $gray-800,\n    '900': $gray-900\n  ),\n  $grays\n);\n\n// The yiq lightness value that determines when the lightness of color changes from \"dark\" to \"light\". Acceptable values are between 0 and 255.\n$yiq-contrasted-threshold: 150 !default;\n\n// Customize the light and dark text colors for use in our YIQ color contrast function.\n$yiq-text-dark: $gray-900 !default;\n$yiq-text-light: $white !default;\n\n$font-weight-thin: 100;\n$font-weight-extralight: 200;\n$font-weight-light: 300;\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-bold: 700;\n\n@mixin letterspacing($units) {\n  letter-spacing: ($units/1000 * 1rem);\n}\n\n// Easings\n$ease-in-out-circ: cubic-bezier(0.27, 0.01, 0.38, 1.06);\n$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);\n\n// Transitions\n$transition-duration: 250ms;\n$transition-base: all $transition-duration $ease-in-out-circ !default;\n$transition-fade: opacity 200ms ease-in-out !default;\n$transition-collapse: height 350ms ease-in-out !default;\n\n@mixin transition($transition...) {\n  @if length($transition) == 0 {\n    transition: $transition-base;\n  } @else {\n    transition: $transition;\n  }\n}\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n@mixin disabled-form-control {\n  cursor: not-allowed !important;\n  color: #c0c0c0;\n\n  * {\n    cursor: not-allowed !important;\n  }\n\n  label {\n    color: #c0c0c0;\n  }\n\n  input {\n    opacity: 0.5;\n  }\n}\n\n@mixin form-control-hint {\n  font-size: 1.4rem;\n  margin: 0.5rem;\n  color: $gray-500;\n}\n\n@function fluidCalc($minSize, $maxSize, $minViewport, $maxViewport) {\n  // without \"px\"\n  // refernce: https://www.madebymike.com.au/writing/fluid-type-calc-examples/\n  @return calc(\n    #{$minSize}px + (#{$maxSize} - #{$minSize}) * (100vw - #{$minViewport}px) /\n      (#{$maxViewport} - #{$minViewport})\n  );\n}\n\n// Color contrast\n@function color-yiq($color) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= 150) {\n    @return darken($color, 65);\n  } @else {\n    @return #fff;\n  }\n}\n\n@mixin border-top-radius($radius) {\n  border-top-left-radius: $radius;\n  border-top-right-radius: $radius;\n}\n\n@mixin border-right-radius($radius) {\n  border-top-right-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin border-left-radius($radius) {\n  border-top-left-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin text-truncate() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n@mixin hover {\n  @include hover-no-touch {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus {\n  @include hover-no-touch {\n    &:hover,\n    &:focus {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus-active {\n  @include hover-no-touch {\n    &:hover,\n    &:focus,\n    &:active {\n      @content;\n    }\n  }\n}\n\n@mixin hover-not-disabled {\n  @include hover-no-touch {\n    &:not([disabled]):not(.disabled):hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-no-touch {\n  @media (hover: hover) {\n    @content;\n  }\n}\n\n@import '../../styles/themes/talentPortal/tokens';\n\n$form-select-indicator-color: $gray-800 !default;\n$form-select-indicator: str-replace(\n  url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='#{$form-select-indicator-color}' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E\"),\n  '#',\n  '%23'\n) !default;\n$form-select-indicator-padding: 1.6rem !default; // Extra padding to account for the presence of the background-image based indicator\n$form-select-bg-size: 8px 10px !default; // In pixels because image dimensions\n\n.form-select {\n  appearance: none;\n  height: $form-control-height;\n  padding: $form-control-padding-y ($form-control-padding-x + $form-select-indicator-padding)\n    $form-control-padding-y $form-control-padding-x;\n  background: $form-control-bg $form-select-indicator no-repeat right $form-control-padding-x center;\n  background-size: $form-select-bg-size;\n\n  &:focus {\n    &::-ms-value {\n      // For visual consistency with other platforms/browsers,\n      // suppress the default white text on blue background highlight given to\n      // the selected option text when the (still closed) <select> receives focus\n      // in IE and (under certain conditions) Edge.\n      // See https://github.com/twbs/bootstrap/issues/19398.\n      // color: $input-color;\n      // background-color: $input-bg;\n    }\n  }\n\n  // &[multiple],\n  // &[size]:not([size=\"1\"]) {\n  //   padding-right: $form-select-padding-x;\n  // }\n}\n\n.form-select-sm {\n  @include small-form-control;\n}\n\n.form-select-lg {\n  @include large-form-control;\n}\n"],"mappings":"AA8TA;;","sourceRoot":""}