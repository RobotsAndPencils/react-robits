{"version":3,"file":"static/css/main.20aa5ebb.chunk.css","sources":["webpack:///global.module.scss","webpack:///avatar_talentPortal.module.scss","webpack:///badge_talentPortal.module.scss","webpack:///button_talentPortal.module.scss","webpack:///buttonGroup_talentPortal.module.scss","webpack:///card_talentPortal.module.scss","webpack:///dropdown_talentPortal.module.scss","webpack:///demoIcons.module.scss","webpack:///modal_talentPortal.module.scss","webpack:///progress-bar_talentPortal.module.scss","webpack:///form-checkbox_talentPortal.module.scss","webpack:///form-input_talentPortal.module.scss","webpack:///form-radio_talentPortal.module.scss","webpack:///form-select_talentPortal.module.scss"],"sourcesContent":["// stylelint-disable\n$white: #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #868e96 !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black: #000 !default;\n\n$grays: () !default;\n$grays: map-merge(\n  (\n    '100': $gray-100,\n    '200': $gray-200,\n    '300': $gray-300,\n    '400': $gray-400,\n    '500': $gray-500,\n    '600': $gray-600,\n    '700': $gray-700,\n    '800': $gray-800,\n    '900': $gray-900\n  ),\n  $grays\n);\n\n// The yiq lightness value that determines when the lightness of color changes from \"dark\" to \"light\". Acceptable values are between 0 and 255.\n$yiq-contrasted-threshold: 150 !default;\n\n// Customize the light and dark text colors for use in our YIQ color contrast function.\n$yiq-text-dark: $gray-900 !default;\n$yiq-text-light: $white !default;\n\n$font-weight-thin: 100;\n$font-weight-extralight: 200;\n$font-weight-light: 300;\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-bold: 700;\n\n@mixin letterspacing($units) {\n  letter-spacing: ($units/1000 * 1rem);\n}\n\n// Easings\n$ease-in-out-circ: cubic-bezier(0.27, 0.01, 0.38, 1.06);\n$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);\n\n// Transitions\n$transition-duration: 250ms;\n$transition-base: all $transition-duration $ease-in-out-circ !default;\n$transition-fade: opacity 200ms ease-in-out !default;\n$transition-collapse: height 350ms ease-in-out !default;\n\n@mixin transition($transition...) {\n  @if length($transition) == 0 {\n    transition: $transition-base;\n  } @else {\n    transition: $transition;\n  }\n}\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n@mixin disabled-form-control {\n  cursor: not-allowed !important;\n  color: #c0c0c0;\n\n  * {\n    cursor: not-allowed !important;\n  }\n\n  label {\n    color: #c0c0c0;\n  }\n\n  input {\n    opacity: 0.5;\n  }\n}\n\n@mixin form-control-hint {\n  font-size: 0.75rem;\n  margin: 0.5rem;\n  color: $gray-500;\n}\n\n// Color contrast\n@function color-yiq($color) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= 150) {\n    @return darken($color, 65);\n  } @else {\n    @return #fff;\n  }\n}\n\n@mixin border-top-radius($radius) {\n  border-top-left-radius: $radius;\n  border-top-right-radius: $radius;\n}\n\n@mixin border-right-radius($radius) {\n  border-top-right-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin border-left-radius($radius) {\n  border-top-left-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin text-truncate() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n@mixin hover {\n  @include hover-no-touch {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus {\n  @include hover-no-touch {\n    &:hover,\n    &:focus {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus-active {\n  @include hover-no-touch {\n    &:hover,\n    &:focus,\n    &:active {\n      @content;\n    }\n  }\n}\n\n@mixin hover-not-disabled {\n  @include hover-no-touch {\n    &:not([disabled]):not(.disabled):hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-no-touch {\n  @media (hover: hover) {\n    @content;\n  }\n}\n\n@import url('https://fonts.googleapis.com/css?family=Poppins:200,200i,400,400i,600,600i,|Roboto+Mono|Roboto:400,400i,900,900i');\n\n@import './tokens.scss';\n:global {\n  //\n  // Reboot\n  //\n\n  // scss-lint:disable QualifyingElement, DuplicateProperty\n\n  //\n  // HTML (element)\n  //\n  html {\n    font-size: 10px;\n    @include media-breakpoint-down(xs) {\n      font-size: 15px;\n    }\n  }\n\n  //\n  // Body\n  //\n\n  body {\n    font-size: $font-size-base;\n    font-weight: $font-weight-light;\n  }\n\n  //\n  // Links\n  //\n\n  a {\n    color: $link-color;\n    text-decoration: $link-decoration;\n\n    @include hover {\n      color: $link-hover-color;\n      text-decoration: $link-hover-decoration;\n    }\n  }\n\n  b,\n  strong {\n    font-weight: $font-weight-medium;\n  }\n\n  //\n  // Typography\n  //\n\n  // Remove top margins from headings\n  //\n  // By default, `<h1>`-`<h6>` all receive top and bottom margins. We nuke the top\n  // margin for easier control within type scales as it avoids margin collapsing.\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin-top: 0;\n    margin-bottom: 0.8rem;\n  }\n\n  label {\n    display: inline-block;\n    margin-bottom: 0.8rem;\n    color: $gray-600;\n  }\n\n  //\n  // Headings\n  //\n\n  // Ensure elements that are not headings are properly\n  // displayed as block level elements.\n  .h1,\n  .h2,\n  .h3,\n  .h4,\n  .h5,\n  .h6 {\n    display: block;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  .h1,\n  .h2,\n  .h3,\n  .h4,\n  .h5,\n  .h6 {\n    margin-bottom: $headings-margin-bottom;\n    font-family: $headings-font-family;\n    font-weight: $headings-font-weight;\n    color: $headings-color;\n  }\n\n  h1,\n  .h1 {\n    font-size: $h1-font-size;\n    letter-spacing: $headings-letter-spacing;\n    line-height: $h1-line-height;\n  }\n\n  h2,\n  .h2 {\n    font-size: $h2-font-size;\n    letter-spacing: $headings-letter-spacing;\n    line-height: $h2-line-height;\n  }\n\n  h3,\n  .h3 {\n    font-size: $h3-font-size;\n    line-height: $h3-line-height;\n  }\n\n  h4,\n  .h4 {\n    font-size: $h4-font-size;\n    line-height: $h4-line-height;\n  }\n\n  h5,\n  .h5 {\n    font-size: $h5-font-size;\n    line-height: $h5-line-height;\n  }\n\n  h6,\n  .h6 {\n    font-size: $h6-font-size;\n    line-height: $h6-line-height;\n  }\n\n  .lead {\n    line-height: $lead-line-height;\n  }\n\n  //\n  // Paragraphs\n  //\n\n  p {\n    margin-bottom: $paragraphs-margin-bottom;\n  }\n\n  //\n  // Horizontal rules\n  //\n\n  hr {\n    margin-top: $hr-margin-y;\n    margin-bottom: $hr-margin-y;\n    border-top: $hr-border-width solid $hr-border-color;\n  }\n\n  //\n  // Emphasis\n  //\n\n  small,\n  .small {\n    font-size: $small-font-size;\n    font-weight: $font-weight-light;\n  }\n\n  mark,\n  .mark {\n    padding: $mark-padding;\n    background-color: $mark-bg;\n  }\n\n  //\n  // Misc\n  //\n\n  // Blockquotes\n  .blockquote {\n    margin-bottom: $blockquote-margin-bottom;\n    font-size: $blockquote-font-size;\n  }\n\n  .blockquote-footer {\n    font-size: $blockquote-footer-font-size;\n  }\n\n  // Anchor white text hover adjustment\n  a.text-white {\n    @include hover-focus {\n      color: darken($white, 10%) !important;\n    }\n  }\n\n  // Black text variation\n  .text-black {\n    color: $black;\n  }\n\n  // Anchor black text hover adjustment\n  a.text-black {\n    @include hover-focus {\n      color: darken($black, 10%) !important;\n    }\n  }\n\n  //\n  // Forms\n  //\n\n  .form-control {\n    height: $form-control-height;\n    width: 100%;\n    min-width: $form-control-min-width;\n    box-sizing: border-box;\n    padding: $form-control-padding-y $form-control-padding-x;\n    font-size: $form-control-font-size; // $font-size-base\n    line-height: $form-control-line-height;\n    color: $form-control-color;\n    background-color: $form-control-bg;\n    border: $form-control-border-width solid $form-control-border-color;\n    font-weight: $font-weight-light;\n    will-change: border-color, box-shadow;\n    border-radius: $form-control-border-radius;\n    box-shadow: $form-control-box-shadow;\n    @include transition($form-control-transition);\n\n    &:hover {\n      border-color: $form-control-hover-border-color;\n    }\n\n    // Customize the `:focus` state to imitate native WebKit styles.\n    @include form-control-focus();\n\n    // Placeholder\n    &::placeholder {\n      color: $form-control-placeholder-color;\n    }\n\n    // Disabled and read-only inputs\n    &:disabled,\n    &[readonly] {\n      background-color: $form-control-disabled-bg;\n\n      &:hover {\n        border-color: $form-control-border-color;\n        cursor: not-allowed;\n      }\n    }\n\n    // Fix readonly, but not disabled fields box shadow and border color.\n    &[readonly]:not(:disabled) {\n      &:focus {\n        box-shadow: none;\n        border-color: $form-control-border-color;\n      }\n    }\n  }\n\n  .form-control-hint {\n    @include form-control-hint;\n  }\n\n  .form-control-container {\n    label + [class*='form-control-hint'] {\n      margin: 0 0 0.8rem 0;\n    }\n\n    &.inline {\n      display: inline-block;\n    }\n\n    textarea {\n      height: auto;\n\n      &[cols] {\n        width: auto;\n      }\n\n      &.noresize {\n        resize: none;\n      }\n    }\n  }\n\n  .form-control-error {\n    font-size: 1.2rem;\n    margin: 0.8rem;\n    color: $danger;\n    font-weight: $font-weight-medium;\n  }\n\n  .form-control-descenders {\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .form-control-required {\n    font-size: 1.2rem;\n    margin: 0.8rem;\n    color: $gray-500;\n    font-weight: $font-weight-semibold;\n    text-transform: uppercase;\n  }\n\n  .form-control-sm {\n    @include small-form-control;\n  }\n\n  .form-control-label-sm {\n    font-size: $font-size-sm;\n  }\n\n  .form-control-lg {\n    @include large-form-control;\n  }\n\n  // Form validation\n  //\n  // Provide feedback to users when form field values are valid or invalid. Works\n  // primarily for client-side validation via scoped `:invalid` and `:valid`\n  // pseudo-classes but also includes `.is-invalid` and `.is-valid` classes for\n  // server side validation.\n\n  @include form-validation-state('valid', $success);\n  @include form-validation-state('invalid', $danger);\n\n  .sr-only {\n    @include sr-only;\n  }\n}\n","// stylelint-disable\n$white: #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #868e96 !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black: #000 !default;\n\n$grays: () !default;\n$grays: map-merge(\n  (\n    '100': $gray-100,\n    '200': $gray-200,\n    '300': $gray-300,\n    '400': $gray-400,\n    '500': $gray-500,\n    '600': $gray-600,\n    '700': $gray-700,\n    '800': $gray-800,\n    '900': $gray-900\n  ),\n  $grays\n);\n\n// The yiq lightness value that determines when the lightness of color changes from \"dark\" to \"light\". Acceptable values are between 0 and 255.\n$yiq-contrasted-threshold: 150 !default;\n\n// Customize the light and dark text colors for use in our YIQ color contrast function.\n$yiq-text-dark: $gray-900 !default;\n$yiq-text-light: $white !default;\n\n$font-weight-thin: 100;\n$font-weight-extralight: 200;\n$font-weight-light: 300;\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-bold: 700;\n\n@mixin letterspacing($units) {\n  letter-spacing: ($units/1000 * 1rem);\n}\n\n// Easings\n$ease-in-out-circ: cubic-bezier(0.27, 0.01, 0.38, 1.06);\n$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);\n\n// Transitions\n$transition-duration: 250ms;\n$transition-base: all $transition-duration $ease-in-out-circ !default;\n$transition-fade: opacity 200ms ease-in-out !default;\n$transition-collapse: height 350ms ease-in-out !default;\n\n@mixin transition($transition...) {\n  @if length($transition) == 0 {\n    transition: $transition-base;\n  } @else {\n    transition: $transition;\n  }\n}\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n@mixin disabled-form-control {\n  cursor: not-allowed !important;\n  color: #c0c0c0;\n\n  * {\n    cursor: not-allowed !important;\n  }\n\n  label {\n    color: #c0c0c0;\n  }\n\n  input {\n    opacity: 0.5;\n  }\n}\n\n@mixin form-control-hint {\n  font-size: 0.75rem;\n  margin: 0.5rem;\n  color: $gray-500;\n}\n\n// Color contrast\n@function color-yiq($color) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= 150) {\n    @return darken($color, 65);\n  } @else {\n    @return #fff;\n  }\n}\n\n@mixin border-top-radius($radius) {\n  border-top-left-radius: $radius;\n  border-top-right-radius: $radius;\n}\n\n@mixin border-right-radius($radius) {\n  border-top-right-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin border-left-radius($radius) {\n  border-top-left-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin text-truncate() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n@mixin hover {\n  @include hover-no-touch {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus {\n  @include hover-no-touch {\n    &:hover,\n    &:focus {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus-active {\n  @include hover-no-touch {\n    &:hover,\n    &:focus,\n    &:active {\n      @content;\n    }\n  }\n}\n\n@mixin hover-not-disabled {\n  @include hover-no-touch {\n    &:not([disabled]):not(.disabled):hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-no-touch {\n  @media (hover: hover) {\n    @content;\n  }\n}\n\n@import '../../styles/themes/talentPortal/tokens';\n\n.avatar {\n  display: inline-flex;\n  border-radius: 50%;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n  color: color-yiq($gray-100);\n  box-sizing: border-box;\n  background-color: $white;\n\n  img {\n    max-width: 100%;\n    max-height: 100%;\n    object-fit: contain;\n  }\n\n  &.with-image {\n    border: none;\n  }\n\n  &.with-shadow {\n    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);\n  }\n\n  &.squared {\n    border-radius: 0;\n  }\n\n  &.bordered {\n    border: 3px solid $white;\n  }\n\n  &.transparent {\n    background-color: transparent;\n  }\n\n  &.editable {\n    position: relative;\n    cursor: pointer;\n\n    &:before {\n      content: '';\n      width: 100%;\n      height: 100%;\n      background: rgba(255, 255, 255, 0.9);\n      position: absolute;\n      top: 0;\n      left: 0;\n      opacity: 0;\n      transition: all 100ms linear;\n    }\n    &:after {\n      content: 'Edit';\n      text-transform: uppercase;\n      position: absolute;\n      left: 50%;\n      top: 50%;\n      opacity: 0;\n      transform: translate(-50%, -50%);\n    }\n\n    &:hover {\n      &:before,\n      &:after {\n        opacity: 1;\n      }\n    }\n  }\n}\n\n.avatar-sm {\n  width: 40px;\n  height: 40px;\n  font-size: 1.28rem;\n\n  &:after {\n    font-size: 0.8rem;\n  }\n}\n\n.avatar-md {\n  width: 70px;\n  height: 70px;\n  font-size: 2.4rem;\n\n  &:after {\n    font-size: 1.28rem;\n  }\n}\n\n.avatar-lg {\n  width: 100px;\n  height: 100px;\n  font-size: 3.2rem;\n\n  &:after {\n    font-size: 1.6rem;\n  }\n}\n","// stylelint-disable\n$white: #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #868e96 !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black: #000 !default;\n\n$grays: () !default;\n$grays: map-merge(\n  (\n    '100': $gray-100,\n    '200': $gray-200,\n    '300': $gray-300,\n    '400': $gray-400,\n    '500': $gray-500,\n    '600': $gray-600,\n    '700': $gray-700,\n    '800': $gray-800,\n    '900': $gray-900\n  ),\n  $grays\n);\n\n// The yiq lightness value that determines when the lightness of color changes from \"dark\" to \"light\". Acceptable values are between 0 and 255.\n$yiq-contrasted-threshold: 150 !default;\n\n// Customize the light and dark text colors for use in our YIQ color contrast function.\n$yiq-text-dark: $gray-900 !default;\n$yiq-text-light: $white !default;\n\n$font-weight-thin: 100;\n$font-weight-extralight: 200;\n$font-weight-light: 300;\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-bold: 700;\n\n@mixin letterspacing($units) {\n  letter-spacing: ($units/1000 * 1rem);\n}\n\n// Easings\n$ease-in-out-circ: cubic-bezier(0.27, 0.01, 0.38, 1.06);\n$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);\n\n// Transitions\n$transition-duration: 250ms;\n$transition-base: all $transition-duration $ease-in-out-circ !default;\n$transition-fade: opacity 200ms ease-in-out !default;\n$transition-collapse: height 350ms ease-in-out !default;\n\n@mixin transition($transition...) {\n  @if length($transition) == 0 {\n    transition: $transition-base;\n  } @else {\n    transition: $transition;\n  }\n}\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n@mixin disabled-form-control {\n  cursor: not-allowed !important;\n  color: #c0c0c0;\n\n  * {\n    cursor: not-allowed !important;\n  }\n\n  label {\n    color: #c0c0c0;\n  }\n\n  input {\n    opacity: 0.5;\n  }\n}\n\n@mixin form-control-hint {\n  font-size: 0.75rem;\n  margin: 0.5rem;\n  color: $gray-500;\n}\n\n// Color contrast\n@function color-yiq($color) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= 150) {\n    @return darken($color, 65);\n  } @else {\n    @return #fff;\n  }\n}\n\n@mixin border-top-radius($radius) {\n  border-top-left-radius: $radius;\n  border-top-right-radius: $radius;\n}\n\n@mixin border-right-radius($radius) {\n  border-top-right-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin border-left-radius($radius) {\n  border-top-left-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin text-truncate() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n@mixin hover {\n  @include hover-no-touch {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus {\n  @include hover-no-touch {\n    &:hover,\n    &:focus {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus-active {\n  @include hover-no-touch {\n    &:hover,\n    &:focus,\n    &:active {\n      @content;\n    }\n  }\n}\n\n@mixin hover-not-disabled {\n  @include hover-no-touch {\n    &:not([disabled]):not(.disabled):hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-no-touch {\n  @media (hover: hover) {\n    @content;\n  }\n}\n\n@import '../../styles/themes/talentPortal/tokens';\n\n$badge-color: $white !default;\n$badge-font-size: 75% !default;\n$badge-font-weight: $font-weight-medium !default;\n$badge-padding-y: 0.6rem !default;\n$badge-padding-x: 0.8rem !default;\n$badge-font-family: $featured-font !default;\n$badge-pill-border-radius: 16rem !default;\n$badge-border-radius: 0.6rem !default;\n$badge-pill-padding-x: $badge-padding-x !default;\n\n@mixin badge-variant($bg) {\n  color: color-yiq($bg);\n  background-color: $bg;\n\n  &[href] {\n    @include hover-focus {\n      color: color-yiq($bg);\n      text-decoration: none;\n      background-color: darken($bg, 10%);\n    }\n  }\n\n  &:hover {\n    color: color-yiq($bg);\n  }\n}\n\n.badge {\n  display: inline-block;\n  padding: $badge-padding-y $badge-padding-x;\n  font-size: $badge-font-size;\n  font-weight: $badge-font-weight;\n  line-height: 1;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n\n  font-family: $badge-font-family;\n  color: $badge-color;\n\n  border-radius: $badge-border-radius;\n\n  // Empty badges collapse automatically\n  &:empty {\n    display: none;\n  }\n}\n\n// Quick fix for badges in buttons\n.btn .badge {\n  position: relative;\n  top: -1px;\n}\n\n// Badge anchor transitions\na.badge {\n  @include transition($transition-base);\n\n  &:hover {\n    cursor: pointer;\n  }\n}\n\n// Pill badges\n.badge-pill {\n  padding-right: $badge-pill-padding-x;\n  padding-left: $badge-pill-padding-x;\n  border-radius: $badge-pill-border-radius;\n}\n\n.removable {\n  padding-right: 2.2rem;\n  position: relative;\n}\n\n.remove {\n  cursor: pointer;\n\n  svg {\n    position: absolute;\n    right: 0.8rem;\n    top: 50%;\n    width: 0.88rem;\n    height: 0.88rem;\n    transform: translateY(-50%);\n    fill: currentColor;\n  }\n}\n\n// Squared badges\n.badge-squared {\n  border-radius: 0;\n}\n\n// Contextual Colors\n@each $color, $value in $theme-colors {\n  .badge-#{$color} {\n    @include badge-variant($value);\n  }\n\n  .badge-outline-#{$color} {\n    background: none;\n    border: 1px solid $value;\n    color: $value;\n\n    // Fix light outlined badges\n    @if ($value == theme-color('light')) {\n      color: color-yiq($value);\n    }\n  }\n}\n","// stylelint-disable\n$white: #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #868e96 !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black: #000 !default;\n\n$grays: () !default;\n$grays: map-merge(\n  (\n    '100': $gray-100,\n    '200': $gray-200,\n    '300': $gray-300,\n    '400': $gray-400,\n    '500': $gray-500,\n    '600': $gray-600,\n    '700': $gray-700,\n    '800': $gray-800,\n    '900': $gray-900\n  ),\n  $grays\n);\n\n// The yiq lightness value that determines when the lightness of color changes from \"dark\" to \"light\". Acceptable values are between 0 and 255.\n$yiq-contrasted-threshold: 150 !default;\n\n// Customize the light and dark text colors for use in our YIQ color contrast function.\n$yiq-text-dark: $gray-900 !default;\n$yiq-text-light: $white !default;\n\n$font-weight-thin: 100;\n$font-weight-extralight: 200;\n$font-weight-light: 300;\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-bold: 700;\n\n@mixin letterspacing($units) {\n  letter-spacing: ($units/1000 * 1rem);\n}\n\n// Easings\n$ease-in-out-circ: cubic-bezier(0.27, 0.01, 0.38, 1.06);\n$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);\n\n// Transitions\n$transition-duration: 250ms;\n$transition-base: all $transition-duration $ease-in-out-circ !default;\n$transition-fade: opacity 200ms ease-in-out !default;\n$transition-collapse: height 350ms ease-in-out !default;\n\n@mixin transition($transition...) {\n  @if length($transition) == 0 {\n    transition: $transition-base;\n  } @else {\n    transition: $transition;\n  }\n}\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n@mixin disabled-form-control {\n  cursor: not-allowed !important;\n  color: #c0c0c0;\n\n  * {\n    cursor: not-allowed !important;\n  }\n\n  label {\n    color: #c0c0c0;\n  }\n\n  input {\n    opacity: 0.5;\n  }\n}\n\n@mixin form-control-hint {\n  font-size: 0.75rem;\n  margin: 0.5rem;\n  color: $gray-500;\n}\n\n// Color contrast\n@function color-yiq($color) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= 150) {\n    @return darken($color, 65);\n  } @else {\n    @return #fff;\n  }\n}\n\n@mixin border-top-radius($radius) {\n  border-top-left-radius: $radius;\n  border-top-right-radius: $radius;\n}\n\n@mixin border-right-radius($radius) {\n  border-top-right-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin border-left-radius($radius) {\n  border-top-left-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin text-truncate() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n@mixin hover {\n  @include hover-no-touch {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus {\n  @include hover-no-touch {\n    &:hover,\n    &:focus {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus-active {\n  @include hover-no-touch {\n    &:hover,\n    &:focus,\n    &:active {\n      @content;\n    }\n  }\n}\n\n@mixin hover-not-disabled {\n  @include hover-no-touch {\n    &:not([disabled]):not(.disabled):hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-no-touch {\n  @media (hover: hover) {\n    @content;\n  }\n}\n\n@import '../../styles/themes/talentPortal/tokens';\n\n$btn-padding-y: 1.2rem !default;\n$btn-padding-x: 2rem !default;\n$btn-padding-y-lg: 1.2rem !default;\n$btn-padding-x-lg: 2.8rem !default;\n$btn-padding-y-sm: 0.56rem !default;\n$btn-padding-x-sm: 1.6rem !default;\n\n$btn-line-height-base: 1.125 !default;\n$btn-line-height-sm: 1.5 !default;\n$btn-line-height-lg: 1.5 !default;\n\n$btn-pill-border-radius: 50px !default;\n\n$btn-font-weight: $font-weight-regular !default;\n$btn-font-size: 1.4rem !default;\n$btn-font-size-sm: 1.2rem !default;\n$btn-font-size-lg: 1.8rem !default;\n$btn-font-family: $featured-font !default;\n\n$btn-box-shadow: none !default;\n$btn-active-box-shadow: inset 0 3px 5px rgba($black, 0.125) !default;\n\n$btn-link-disabled-color: $gray-600 !default;\n$btn-block-spacing-y: 0.8rem !default;\n\n$btn-border-radius: $border-radius !default;\n$btn-border-radius-lg: $border-radius-lg !default;\n$btn-border-radius-sm: $border-radius-sm !default;\n\n$btn-border-width: 1px !default;\n\n$btn-transition: $transition-base !default;\n\n// Button sizes\n@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {\n  padding: $padding-y $padding-x;\n  font-size: $font-size;\n  line-height: $line-height;\n  border-radius: $border-radius;\n}\n\n@keyframes :global(spin) {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n// Loading spinner\n@mixin spinner($track: #777, $bar: #fff) {\n  &:after {\n    content: '';\n    box-sizing: border-box;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 20px;\n    height: 20px;\n    margin-top: -10px;\n    margin-left: -10px;\n    border-radius: 50%;\n    border: 2px solid $track;\n    border-top-color: $bar;\n\n    :global {\n      animation: spin 0.6s linear infinite;\n    }\n  }\n}\n\n// Button variants\n@mixin button-variant(\n  $background,\n  $border: $background,\n  $hover-background: darken($background, 5%),\n  $hover-border: $hover-background,\n  $hover-box-shadow: 0 4px 10px rgba($background, 0.25),\n  $active-background: darken($background, 5%),\n  $active-border: darken($border, 10%),\n  $active-box-shadow: inset 0 3px 5px rgba($black, 0.125)\n) {\n  color: color-yiq($background);\n  border-color: $border;\n  background-color: $background;\n  box-shadow: $btn-box-shadow;\n\n  &[class*='dropdown-toggle-split'] {\n    background-color: darken($background, 7);\n  }\n\n  @include hover-not-disabled {\n    color: color-yiq($hover-background);\n    background-color: $background;\n    border-color: $hover-border;\n    @if $enable-shadows {\n      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05), $hover-box-shadow;\n    }\n  }\n\n  &:focus,\n  &.focus {\n    @if $enable-shadows {\n      box-shadow: 0 0 0 3px rgba($background, 0.15), 0 3px 15px rgba($background, 0.2),\n        0 2px 5px rgba($black, 0.1);\n    } @else {\n      box-shadow: 0 0 0 3px rgba($background, 0.5);\n    }\n  }\n\n  &:not(:disabled):not(.disabled):active,\n  &:not(:disabled):not(.disabled).active,\n  .show > &.dropdown-toggle {\n    color: color-yiq($active-background);\n    background-color: $active-background;\n    border-color: $active-border;\n    background-image: none;\n    box-shadow: $active-box-shadow !important;\n  }\n\n  &.loading {\n    color: darken($background, 15);\n    background: darken($background, 10);\n    border-color: darken($background, 10);\n\n    @include spinner(lighten($background, 20), #fff);\n  }\n}\n\n@mixin button-outline-variant(\n  $color,\n  $color-hover: color-yiq($color),\n  $active-background: $color,\n  $active-border: $color\n) {\n  $button-text-color: $color; // Fix light or white outlined buttons\n\n  @if ($color==theme-color('light') or $color==$white) {\n    $button-text-color: color-yiq($color);\n  }\n\n  background-color: transparent;\n  background-image: none;\n  border-color: $color;\n  color: $button-text-color;\n\n  @include hover {\n    color: color-yiq($color);\n    background-color: $active-background;\n    border-color: $active-border;\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05), 0 4px 10px rgba($color, 0.25);\n  }\n\n  &:focus,\n  &.focus {\n    @if $enable-shadows {\n      box-shadow: 0 0 0 3px rgba($color, 0.15), 0 3px 15px rgba($color, 0.2),\n        0 2px 5px rgba($black, 0.1) !important;\n    } @else {\n      box-shadow: 0 0 0 3px rgba($color, 0.5) !important;\n    }\n  }\n\n  &.disabled,\n  &:disabled {\n    color: $color;\n    background-color: transparent;\n    box-shadow: none;\n  }\n\n  &:not(:disabled):not(.disabled):active,\n  &:not(:disabled):not(.disabled).active,\n  .show > &.dropdown-toggle {\n    color: color-yiq($active-background);\n    background-color: $active-background;\n    border-color: $active-border;\n    &:focus {\n      // Avoid using mixin so we can pass custom focus shadow properly\n      @if $enable-shadows {\n        box-shadow: inset 0 3px 5px rgba($black, 0.125) !important;\n      } @else {\n        box-shadow: none !important;\n      }\n    }\n  }\n\n  &.loading {\n    color: rgba(0, 0, 0, 0.04);\n    @include spinner(rgba(0, 0, 0, 0.15), lighten($color, 10));\n  }\n}\n\n//\n// Base styles\n//\n\n.btn {\n  font-weight: $btn-font-weight;\n  font-family: $btn-font-family;\n  border: $border-width solid transparent;\n  display: inline-block;\n\n  @include button-size(\n    $btn-padding-y,\n    $btn-padding-x,\n    $btn-font-size,\n    $btn-line-height-base,\n    $btn-border-radius\n  );\n\n  @include transition($btn-transition);\n\n  @include hover {\n    cursor: pointer;\n  }\n\n  &:focus,\n  &.focus {\n    outline: 0;\n    box-shadow: none;\n  }\n\n  &:not([disabled]):not(.disabled):active,\n  &:not([disabled]):not(.disabled).active {\n    background-image: none;\n    box-shadow: none;\n  }\n\n  // Disabled comes first so active can properly restyle\n  &.disabled,\n  &:disabled {\n    box-shadow: none;\n    cursor: not-allowed;\n\n    &:not(.loading) {\n      opacity: 0.5;\n    }\n  }\n\n  &.loading {\n    position: relative;\n  }\n\n  &.btn-squared {\n    border-radius: 0;\n  }\n\n  &.btn-pill {\n    border-radius: $btn-pill-border-radius;\n  }\n}\n\n//\n// Alternate buttons\n//\n\n@each $color, $value in $theme-colors {\n  .btn-#{$color} {\n    @include button-variant($value);\n  }\n}\n\n// White buttons\n.btn-white {\n  @include button-variant($white);\n}\n\n// Black buttons\n.btn-black {\n  @include button-variant($black);\n}\n\n// Outlined default buttons\n@each $color, $value in $theme-colors {\n  .btn-outline-#{$color} {\n    @include button-outline-variant($value);\n  }\n}\n\n// White outline buttons\n.btn-outline-white {\n  @include button-outline-variant($white);\n  color: $white;\n\n  &:not(:disabled):not(.disabled):active,\n  &:not(:disabled):not(.disabled).active {\n    color: $black;\n  }\n}\n\n// Black outline buttons\n.btn-outline-black {\n  @include button-outline-variant($black);\n  color: $black;\n\n  &:not(:disabled):not(.disabled):active,\n  &:not(:disabled):not(.disabled).active {\n    color: $white;\n  }\n}\n\n//\n// Link buttons\n//\n\n// Make a button look and behave like a link\n.btn-link {\n  font-weight: $font-weight-light;\n  color: $link-color;\n\n  @include hover {\n    color: $link-hover-color;\n    text-decoration: $link-hover-decoration;\n  }\n\n  &:focus,\n  &.focus {\n    text-decoration: $link-hover-decoration;\n  }\n\n  &:disabled {\n    color: $btn-link-disabled-color;\n  }\n}\n\n//\n// Button Sizes\n//\n\n.btn-lg {\n  @include button-size(\n    $btn-padding-y-lg,\n    $btn-padding-x-lg,\n    $btn-font-size-lg,\n    $btn-line-height-lg,\n    $btn-border-radius-lg\n  );\n}\n\n.btn-sm {\n  @include button-size(\n    $btn-padding-y-sm,\n    $btn-padding-x-sm,\n    $btn-font-size-sm,\n    $btn-line-height-sm,\n    $btn-border-radius-sm\n  );\n}\n\n//\n// Block button\n//\n\n.btn-block {\n  display: block;\n  width: 100%;\n\n  // Vertically space out multiple block buttons\n  + .btn-block {\n    margin-top: $btn-block-spacing-y;\n  }\n}\n","// stylelint-disable\n$white: #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #868e96 !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black: #000 !default;\n\n$grays: () !default;\n$grays: map-merge(\n  (\n    '100': $gray-100,\n    '200': $gray-200,\n    '300': $gray-300,\n    '400': $gray-400,\n    '500': $gray-500,\n    '600': $gray-600,\n    '700': $gray-700,\n    '800': $gray-800,\n    '900': $gray-900\n  ),\n  $grays\n);\n\n// The yiq lightness value that determines when the lightness of color changes from \"dark\" to \"light\". Acceptable values are between 0 and 255.\n$yiq-contrasted-threshold: 150 !default;\n\n// Customize the light and dark text colors for use in our YIQ color contrast function.\n$yiq-text-dark: $gray-900 !default;\n$yiq-text-light: $white !default;\n\n$font-weight-thin: 100;\n$font-weight-extralight: 200;\n$font-weight-light: 300;\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-bold: 700;\n\n@mixin letterspacing($units) {\n  letter-spacing: ($units/1000 * 1rem);\n}\n\n// Easings\n$ease-in-out-circ: cubic-bezier(0.27, 0.01, 0.38, 1.06);\n$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);\n\n// Transitions\n$transition-duration: 250ms;\n$transition-base: all $transition-duration $ease-in-out-circ !default;\n$transition-fade: opacity 200ms ease-in-out !default;\n$transition-collapse: height 350ms ease-in-out !default;\n\n@mixin transition($transition...) {\n  @if length($transition) == 0 {\n    transition: $transition-base;\n  } @else {\n    transition: $transition;\n  }\n}\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n@mixin disabled-form-control {\n  cursor: not-allowed !important;\n  color: #c0c0c0;\n\n  * {\n    cursor: not-allowed !important;\n  }\n\n  label {\n    color: #c0c0c0;\n  }\n\n  input {\n    opacity: 0.5;\n  }\n}\n\n@mixin form-control-hint {\n  font-size: 0.75rem;\n  margin: 0.5rem;\n  color: $gray-500;\n}\n\n// Color contrast\n@function color-yiq($color) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= 150) {\n    @return darken($color, 65);\n  } @else {\n    @return #fff;\n  }\n}\n\n@mixin border-top-radius($radius) {\n  border-top-left-radius: $radius;\n  border-top-right-radius: $radius;\n}\n\n@mixin border-right-radius($radius) {\n  border-top-right-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin border-left-radius($radius) {\n  border-top-left-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin text-truncate() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n@mixin hover {\n  @include hover-no-touch {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus {\n  @include hover-no-touch {\n    &:hover,\n    &:focus {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus-active {\n  @include hover-no-touch {\n    &:hover,\n    &:focus,\n    &:active {\n      @content;\n    }\n  }\n}\n\n@mixin hover-not-disabled {\n  @include hover-no-touch {\n    &:not([disabled]):not(.disabled):hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-no-touch {\n  @media (hover: hover) {\n    @content;\n  }\n}\n\n@import '../../styles/themes/talentPortal/tokens';\n\n$btn-padding-x: 1.8rem !default;\n$btn-active-box-shadow: inset 0 3px 5px rgba($black, 0.125) !default;\n$btn-border-width: 1px !default;\n\n// Make the div behave like a button\n.btn-group,\n.btn-group-vertical {\n  position: relative;\n  display: inline-flex;\n  vertical-align: middle; // match .btn alignment given font-size hack above\n\n  > button {\n    position: relative;\n    flex: 0 1 auto;\n\n    // Bring the hover, focused, and \"active\" buttons to the front to overlay\n    // the borders properly\n    @include hover {\n      z-index: 1;\n    }\n    &:focus,\n    &:active,\n    &.active {\n      z-index: 1;\n    }\n  }\n\n  // Prevent double borders when buttons are next to each other\n  button + button,\n  button + .btn-group,\n  .btn-group + button,\n  .btn-group + .btn-group {\n    margin-left: -$btn-border-width;\n  }\n}\n\n.btn-group {\n  > button:first-child {\n    margin-left: 0;\n  }\n\n  // Reset rounded corners\n  > button:not(:last-child):not(.dropdown-toggle),\n  > .btn-group:not(:last-child) > button {\n    @include border-right-radius(0);\n  }\n\n  > button:not(:first-child),\n  > .btn-group:not(:first-child) > button {\n    @include border-left-radius(0);\n  }\n}\n\n.btn-group-vertical {\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n\n  button,\n  .btn-group {\n    width: 100%;\n  }\n\n  > button + button,\n  > button + .btn-group,\n  > .btn-group + button,\n  > .btn-group + .btn-group {\n    margin-top: -$btn-border-width;\n    margin-left: 0;\n  }\n\n  // Reset rounded corners\n  > button:not(:last-child):not(.dropdown-toggle),\n  > .btn-group:not(:last-child) > button {\n    @include border-bottom-radius(0);\n  }\n\n  > button:not(:first-child),\n  > .btn-group:not(:first-child) > button {\n    @include border-top-radius(0);\n  }\n}\n\n// Checkbox and radio options\n//\n// In order to support the browser's form validation feedback, powered by the\n// `required` attribute, we have to \"hide\" the inputs via `clip`. We cannot use\n// `display: none;` or `visibility: hidden;` as that also hides the popover.\n// Simply visually hiding the inputs via `opacity` would leave them clickable in\n// certain cases which is prevented by using `clip` and `pointer-events`.\n// This way, we ensure a DOM element is visible to position the popover from.\n//\n// See https://github.com/twbs/bootstrap/pull/12794 and\n// https://github.com/twbs/bootstrap/pull/14559 for more information.\n\n.btn-group-toggle {\n  > button,\n  > .btn-group > button {\n    margin-bottom: 0; // Override default `<label>` value\n\n    input[type='radio'],\n    input[type='checkbox'] {\n      position: absolute;\n      clip: rect(0, 0, 0, 0);\n      pointer-events: none;\n    }\n  }\n}\n","// stylelint-disable\n$white: #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #868e96 !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black: #000 !default;\n\n$grays: () !default;\n$grays: map-merge(\n  (\n    '100': $gray-100,\n    '200': $gray-200,\n    '300': $gray-300,\n    '400': $gray-400,\n    '500': $gray-500,\n    '600': $gray-600,\n    '700': $gray-700,\n    '800': $gray-800,\n    '900': $gray-900\n  ),\n  $grays\n);\n\n// The yiq lightness value that determines when the lightness of color changes from \"dark\" to \"light\". Acceptable values are between 0 and 255.\n$yiq-contrasted-threshold: 150 !default;\n\n// Customize the light and dark text colors for use in our YIQ color contrast function.\n$yiq-text-dark: $gray-900 !default;\n$yiq-text-light: $white !default;\n\n$font-weight-thin: 100;\n$font-weight-extralight: 200;\n$font-weight-light: 300;\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-bold: 700;\n\n@mixin letterspacing($units) {\n  letter-spacing: ($units/1000 * 1rem);\n}\n\n// Easings\n$ease-in-out-circ: cubic-bezier(0.27, 0.01, 0.38, 1.06);\n$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);\n\n// Transitions\n$transition-duration: 250ms;\n$transition-base: all $transition-duration $ease-in-out-circ !default;\n$transition-fade: opacity 200ms ease-in-out !default;\n$transition-collapse: height 350ms ease-in-out !default;\n\n@mixin transition($transition...) {\n  @if length($transition) == 0 {\n    transition: $transition-base;\n  } @else {\n    transition: $transition;\n  }\n}\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n@mixin disabled-form-control {\n  cursor: not-allowed !important;\n  color: #c0c0c0;\n\n  * {\n    cursor: not-allowed !important;\n  }\n\n  label {\n    color: #c0c0c0;\n  }\n\n  input {\n    opacity: 0.5;\n  }\n}\n\n@mixin form-control-hint {\n  font-size: 0.75rem;\n  margin: 0.5rem;\n  color: $gray-500;\n}\n\n// Color contrast\n@function color-yiq($color) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= 150) {\n    @return darken($color, 65);\n  } @else {\n    @return #fff;\n  }\n}\n\n@mixin border-top-radius($radius) {\n  border-top-left-radius: $radius;\n  border-top-right-radius: $radius;\n}\n\n@mixin border-right-radius($radius) {\n  border-top-right-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin border-left-radius($radius) {\n  border-top-left-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin text-truncate() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n@mixin hover {\n  @include hover-no-touch {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus {\n  @include hover-no-touch {\n    &:hover,\n    &:focus {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus-active {\n  @include hover-no-touch {\n    &:hover,\n    &:focus,\n    &:active {\n      @content;\n    }\n  }\n}\n\n@mixin hover-not-disabled {\n  @include hover-no-touch {\n    &:not([disabled]):not(.disabled):hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-no-touch {\n  @media (hover: hover) {\n    @content;\n  }\n}\n\n@import '../../styles/themes/talentPortal/tokens';\n\n$card-spacer-y: 3.5rem !default;\n$card-spacer-x: 3rem !default;\n\n$card-header-spacer-x: $card-spacer-x !default;\n$card-header-spacer-y: ($card-spacer-y / 2) !default;\n\n$card-footer-spacer-x: $card-spacer-x !default;\n$card-footer-spacer-y: ($card-spacer-y / 2) !default;\n\n$card-border-radius: 1rem !default;\n$card-inner-border-radius: $card-border-radius !default;\n\n$card-cap-bg: rgba($gray-700, 0.06) !default;\n$card-bg: $white !default;\n\n$card-title-font-weight: 500 !default;\n$card-title-margin-bottom: 1.2rem !default;\n\n$card-link-font-family: $featured-font !default;\n\n$card-paragraph-margin-bottom: 2.5rem !default;\n\n$card-img-overlay-padding: 3rem 3.5rem !default;\n$card-deck-margin: 1.5rem !default;\n\n$card-list-group-item-padding: 1.3rem 3rem !default;\n$card-group-card-border: 1px solid lighten($gray-700, 53%) !default;\n\n$card-columns-count: 3 !default;\n$card-columns-gap: 2rem !default;\n$card-columns-margin: $card-spacer-y !default;\n\n$card-small-spacer-y: 1.6rem !default;\n$card-small-spacer-x: 1.6rem !default;\n$card-small-box-shadow: 0 2px 0 rgba($gray-700, 0.11), 0 4px 8px rgba($gray-700, 0.12),\n  0 10px 10px rgba($gray-700, 0.06), 0 7px 70px rgba($gray-700, 0.1) !default;\n\n.card {\n  background-color: $card-bg;\n  border: none;\n\n  border-radius: $card-border-radius;\n  box-shadow: $card-box-shadow;\n\n  > .list-group:first-child {\n    .list-group-item:first-child {\n      @include border-top-radius($card-border-radius);\n    }\n  }\n\n  > .list-group:last-child {\n    .list-group-item:last-child {\n      @include border-bottom-radius($card-border-radius);\n    }\n  }\n\n  .list-group-item {\n    padding: $card-list-group-item-padding;\n  }\n\n  // Fix paragraph margins inside cards\n  .card-text {\n    margin-bottom: $card-paragraph-margin-bottom;\n  }\n\n  // Remove text decoration.\n  a:hover {\n    text-decoration: none;\n  }\n\n  // Small card modifier.\n  &-small {\n    .card-header,\n    .card-body,\n    .card-footer {\n      padding: $card-small-spacer-y $card-small-spacer-x;\n    }\n\n    box-shadow: $card-small-box-shadow;\n  }\n}\n\n.card-body {\n  padding: $card-spacer-x;\n\n  > p:last-child {\n    margin-bottom: 0;\n  }\n}\n\n.card-link {\n  font-family: $card-link-font-family;\n\n  + .card-link {\n    margin-left: $card-spacer-x;\n  }\n}\n\n//\n// Optional textual caps\n//\n\n.card-header {\n  padding: $card-header-spacer-y $card-header-spacer-x;\n  background-color: $card-cap-bg;\n  border-bottom: none;\n\n  &:first-child {\n    border-radius: $card-inner-border-radius $card-inner-border-radius 0 0;\n  }\n}\n\n.card-footer {\n  padding: $card-footer-spacer-y $card-footer-spacer-x;\n  background-color: $card-cap-bg;\n  border-top: none;\n\n  &:last-child {\n    border-radius: 0 0 $card-inner-border-radius $card-inner-border-radius;\n  }\n}\n","// stylelint-disable\n$white: #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #868e96 !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black: #000 !default;\n\n$grays: () !default;\n$grays: map-merge(\n  (\n    '100': $gray-100,\n    '200': $gray-200,\n    '300': $gray-300,\n    '400': $gray-400,\n    '500': $gray-500,\n    '600': $gray-600,\n    '700': $gray-700,\n    '800': $gray-800,\n    '900': $gray-900\n  ),\n  $grays\n);\n\n// The yiq lightness value that determines when the lightness of color changes from \"dark\" to \"light\". Acceptable values are between 0 and 255.\n$yiq-contrasted-threshold: 150 !default;\n\n// Customize the light and dark text colors for use in our YIQ color contrast function.\n$yiq-text-dark: $gray-900 !default;\n$yiq-text-light: $white !default;\n\n$font-weight-thin: 100;\n$font-weight-extralight: 200;\n$font-weight-light: 300;\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-bold: 700;\n\n@mixin letterspacing($units) {\n  letter-spacing: ($units/1000 * 1rem);\n}\n\n// Easings\n$ease-in-out-circ: cubic-bezier(0.27, 0.01, 0.38, 1.06);\n$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);\n\n// Transitions\n$transition-duration: 250ms;\n$transition-base: all $transition-duration $ease-in-out-circ !default;\n$transition-fade: opacity 200ms ease-in-out !default;\n$transition-collapse: height 350ms ease-in-out !default;\n\n@mixin transition($transition...) {\n  @if length($transition) == 0 {\n    transition: $transition-base;\n  } @else {\n    transition: $transition;\n  }\n}\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n@mixin disabled-form-control {\n  cursor: not-allowed !important;\n  color: #c0c0c0;\n\n  * {\n    cursor: not-allowed !important;\n  }\n\n  label {\n    color: #c0c0c0;\n  }\n\n  input {\n    opacity: 0.5;\n  }\n}\n\n@mixin form-control-hint {\n  font-size: 0.75rem;\n  margin: 0.5rem;\n  color: $gray-500;\n}\n\n// Color contrast\n@function color-yiq($color) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= 150) {\n    @return darken($color, 65);\n  } @else {\n    @return #fff;\n  }\n}\n\n@mixin border-top-radius($radius) {\n  border-top-left-radius: $radius;\n  border-top-right-radius: $radius;\n}\n\n@mixin border-right-radius($radius) {\n  border-top-right-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin border-left-radius($radius) {\n  border-top-left-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin text-truncate() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n@mixin hover {\n  @include hover-no-touch {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus {\n  @include hover-no-touch {\n    &:hover,\n    &:focus {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus-active {\n  @include hover-no-touch {\n    &:hover,\n    &:focus,\n    &:active {\n      @content;\n    }\n  }\n}\n\n@mixin hover-not-disabled {\n  @include hover-no-touch {\n    &:not([disabled]):not(.disabled):hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-no-touch {\n  @media (hover: hover) {\n    @content;\n  }\n}\n\n@import '../../styles/themes/talentPortal/tokens';\n\n$dropdown-bg: $white !default;\n$dropdown-min-width: 16rem !default;\n$dropdown-padding-y: 0.8rem !default;\n$dropdown-spacer: 0 !default;\n$dropdown-border-color: rgba($black, 0.05) !default;\n$dropdown-border-width: $border-width !default;\n$dropdown-divider-bg: $gray-200 !default;\n$dropdown-border-radius: $border-radius !default;\n\n$dropdown-box-shadow: 0 0.8rem 6.4rem rgba(0, 0, 0, 0.11), 0 10px 20px rgba(0, 0, 0, 0.05),\n  0 2px 3px rgba(0, 0, 0, 0.06) !default;\n\n$dropdown-link-color: $gray-900 !default;\n$dropdown-link-hover-color: darken($gray-900, 5%) !default;\n$dropdown-link-hover-bg: lighten($gray-700, 55%) !default;\n$dropdown-link-active-color: $component-active-color !default;\n$dropdown-link-active-bg: lighten($gray-700, 40%) !default;\n$dropdown-link-disabled-color: $gray-600 !default;\n\n$dropdown-item-padding-y: 0.8rem !default;\n$dropdown-item-padding-x: 2rem !default;\n$dropdown-item-font-size: 1.5rem !default;\n$dropdown-item-transition: background-color $transition-duration $ease-in-out-circ,\n  color $transition-duration $ease-in-out-circ !default;\n\n$dropdown-header-color: $gray-600 !default;\n\n// Small dropdowns\n$dropdown-sm-padding-y: 0.4rem !default;\n$dropdown-sm-font-size: 1.3008rem !default;\n$dropdown-sm-box-shadow: 0 0.8rem 3.2rem rgba(0, 0, 0, 0.11), 0 3px 10px rgba(0, 0, 0, 0.05),\n  0 2px 3px rgba(0, 0, 0, 0.06) !default;\n\n$dropdown-sm-item-padding-y: 0.6rem !default;\n$dropdown-sm-item-padding-x: 1.4rem !default;\n\n$dropdown-sm-item-font-size: 1.3008rem !default;\n\n$dropdown-sm-divider-margin-x: 0 !default;\n$dropdown-sm-divider-margin-y: 0.4rem !default;\n\n$btn-padding-y: 0.8rem !default;\n$btn-padding-x: 1.6rem !default;\n$btn-padding-y-lg: 1.2rem !default;\n$btn-padding-x-lg: 2.8rem !default;\n$btn-padding-y-sm: 0.56rem !default;\n$btn-padding-x-sm: 1.6rem !default;\n\n// The dropdown wrapper (`<div>`)\n.dropup,\n.dropright,\n.dropdown,\n.dropleft {\n  position: relative;\n  display: inline-block;\n\n  > *:first-child {\n    cursor: pointer;\n  }\n}\n\n.dropdown-toggle {\n  // Generate the caret automatically\n  @include caret;\n}\n\n// The dropdown menu\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  z-index: $zindex-dropdown;\n  display: none; // none by default, but block on \"open\" of the menu\n  float: left;\n  min-width: $dropdown-min-width;\n  padding: $dropdown-padding-y 0;\n  margin: $dropdown-spacer 0 0; // override default ul\n  font-size: $font-size-base; // Redeclare because nesting can cause inheritance issues\n  color: $body-color;\n  text-align: left; // Ensures proper alignment if parent has it changed (e.g., modal footer)\n  list-style: none;\n  background-color: $dropdown-bg;\n  background-clip: padding-box;\n  border: $dropdown-border-width solid $dropdown-border-color;\n  border-radius: $dropdown-border-radius;\n  box-shadow: $dropdown-box-shadow;\n\n  &-sm {\n    box-shadow: $dropdown-sm-box-shadow;\n    padding: $dropdown-sm-padding-y 0;\n    font-size: $dropdown-sm-font-size;\n\n    .dropdown-item {\n      padding: $dropdown-sm-item-padding-y $dropdown-sm-item-padding-x;\n      font-size: $dropdown-sm-item-font-size;\n    }\n\n    .dropdown-divider {\n      margin: $dropdown-sm-divider-margin-y $dropdown-sm-divider-margin-x;\n    }\n  }\n}\n\n.dropdown-menu-right {\n  right: 0;\n  left: auto;\n}\n\n// Allow for dropdowns to go bottom up (aka, dropup-menu)\n// Just add .dropup after the standard .dropdown class and you're set.\n.dropup {\n  .dropdown-menu {\n    top: auto;\n    bottom: 100%;\n    margin-top: 0;\n    margin-bottom: $dropdown-spacer;\n  }\n\n  .dropdown-toggle {\n    @include caret(up);\n  }\n}\n\n.dropright {\n  .dropdown-menu {\n    top: 0;\n    right: auto;\n    left: 100%;\n    margin-top: 0;\n    margin-left: $dropdown-spacer;\n  }\n\n  .dropdown-toggle {\n    @include caret(right);\n    &::after {\n      vertical-align: 0;\n    }\n  }\n}\n\n.dropleft {\n  .dropdown-menu {\n    top: 0;\n    right: 100%;\n    left: auto;\n    margin-top: 0;\n    margin-right: $dropdown-spacer;\n  }\n\n  .dropdown-toggle {\n    @include caret(left);\n    &::before {\n      vertical-align: 0;\n    }\n  }\n}\n\n// When enabled Popper.js, reset basic dropdown position\n// stylelint-disable no-duplicate-selectors\n.dropdown-menu {\n  &[x-placement^='top'],\n  &[x-placement^='right'],\n  &[x-placement^='bottom'],\n  &[x-placement^='left'] {\n    right: auto;\n    bottom: auto;\n  }\n}\n// stylelint-enable no-duplicate-selectors\n\n// Dividers (basically an `<hr>`) within the dropdown\n.dropdown-divider {\n  height: 0;\n  margin: ($spacer / 2) 0;\n  overflow: hidden;\n  border-top: 1px solid $dropdown-divider-bg;\n}\n\n// Links, buttons, and more within the dropdown menu\n//\n// `<button>`-specific styles are denoted with `// For <button>s`\n.dropdown-item {\n  display: block;\n  width: 100%; // For `<button>`s\n  padding: $dropdown-item-padding-y $dropdown-item-padding-x;\n  clear: both;\n  font-weight: $font-weight-light;\n  color: $dropdown-link-color;\n  text-align: inherit; // For `<button>`s\n  white-space: nowrap; // prevent links from randomly breaking onto new lines\n  background-color: transparent; // For `<button>`s\n  border: 0; // For `<button>`s\n  font-size: $dropdown-item-font-size;\n  transition: $dropdown-item-transition;\n  cursor: pointer;\n\n  @include hover-focus {\n    color: $dropdown-link-hover-color;\n    text-decoration: none;\n    @include gradient-bg($dropdown-link-hover-bg);\n  }\n\n  &.active,\n  &:active {\n    color: $dropdown-link-active-color;\n    text-decoration: none;\n    @include gradient-bg($dropdown-link-active-bg);\n  }\n\n  &.disabled,\n  &:disabled {\n    color: $dropdown-link-disabled-color;\n    background-color: transparent;\n    // Remove CSS gradients if they're enabled\n    @if $enable-gradients {\n      background-image: none;\n    }\n\n    &:hover {\n      background: none;\n      cursor: not-allowed;\n    }\n  }\n}\n\n.dropdown-menu.show {\n  display: block;\n}\n\n// Dropdown section headers\n.dropdown-header {\n  display: block;\n  padding: $dropdown-padding-y $dropdown-item-padding-x;\n  margin-bottom: 0; // for use with heading elements\n  font-size: $font-size-sm;\n  color: $dropdown-header-color;\n  white-space: nowrap; // as with > li > a\n}\n\n// Dropdown text\n.dropdown-item-text {\n  display: block;\n  padding: $dropdown-item-padding-y $dropdown-item-padding-x;\n  color: $dropdown-link-color;\n}\n\n//\n// Split button dropdowns\n//\n\n.dropdown-toggle-split {\n  padding-right: $btn-padding-x * 0.75;\n  padding-left: $btn-padding-x * 0.75;\n\n  &::after,\n  .dropup &::after,\n  .dropright &::after {\n    margin-left: 0;\n  }\n\n  .dropleft &::before {\n    margin-right: 0;\n  }\n\n  &.sm {\n    padding-right: $btn-padding-x-sm * 0.75;\n    padding-left: $btn-padding-x-sm * 0.75;\n  }\n\n  &.lg {\n    padding-right: $btn-padding-x-lg * 0.75;\n    padding-left: $btn-padding-x-lg * 0.75;\n  }\n}\n","// stylelint-disable\n$white: #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #868e96 !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black: #000 !default;\n\n$grays: () !default;\n$grays: map-merge(\n  (\n    '100': $gray-100,\n    '200': $gray-200,\n    '300': $gray-300,\n    '400': $gray-400,\n    '500': $gray-500,\n    '600': $gray-600,\n    '700': $gray-700,\n    '800': $gray-800,\n    '900': $gray-900\n  ),\n  $grays\n);\n\n// The yiq lightness value that determines when the lightness of color changes from \"dark\" to \"light\". Acceptable values are between 0 and 255.\n$yiq-contrasted-threshold: 150 !default;\n\n// Customize the light and dark text colors for use in our YIQ color contrast function.\n$yiq-text-dark: $gray-900 !default;\n$yiq-text-light: $white !default;\n\n$font-weight-thin: 100;\n$font-weight-extralight: 200;\n$font-weight-light: 300;\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-bold: 700;\n\n@mixin letterspacing($units) {\n  letter-spacing: ($units/1000 * 1rem);\n}\n\n// Easings\n$ease-in-out-circ: cubic-bezier(0.27, 0.01, 0.38, 1.06);\n$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);\n\n// Transitions\n$transition-duration: 250ms;\n$transition-base: all $transition-duration $ease-in-out-circ !default;\n$transition-fade: opacity 200ms ease-in-out !default;\n$transition-collapse: height 350ms ease-in-out !default;\n\n@mixin transition($transition...) {\n  @if length($transition) == 0 {\n    transition: $transition-base;\n  } @else {\n    transition: $transition;\n  }\n}\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n@mixin disabled-form-control {\n  cursor: not-allowed !important;\n  color: #c0c0c0;\n\n  * {\n    cursor: not-allowed !important;\n  }\n\n  label {\n    color: #c0c0c0;\n  }\n\n  input {\n    opacity: 0.5;\n  }\n}\n\n@mixin form-control-hint {\n  font-size: 0.75rem;\n  margin: 0.5rem;\n  color: $gray-500;\n}\n\n// Color contrast\n@function color-yiq($color) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= 150) {\n    @return darken($color, 65);\n  } @else {\n    @return #fff;\n  }\n}\n\n@mixin border-top-radius($radius) {\n  border-top-left-radius: $radius;\n  border-top-right-radius: $radius;\n}\n\n@mixin border-right-radius($radius) {\n  border-top-right-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin border-left-radius($radius) {\n  border-top-left-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin text-truncate() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n@mixin hover {\n  @include hover-no-touch {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus {\n  @include hover-no-touch {\n    &:hover,\n    &:focus {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus-active {\n  @include hover-no-touch {\n    &:hover,\n    &:focus,\n    &:active {\n      @content;\n    }\n  }\n}\n\n@mixin hover-not-disabled {\n  @include hover-no-touch {\n    &:not([disabled]):not(.disabled):hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-no-touch {\n  @media (hover: hover) {\n    @content;\n  }\n}\n\n.grid-caption {\n  font-size: 14px;\n  max-width: 800px;\n  text-align: center;\n  margin-left: auto;\n  margin-right: auto;\n  color: #999;\n}\n\n.icons-grid {\n  display: grid;\n  grid-template-columns: 15fr 15fr 15fr 15fr 15fr 15fr;\n  align-items: baseline;\n\n  > * {\n    margin: 25px;\n    font-size: 13px;\n    color: #999999;\n    text-align: center;\n\n    svg {\n      display: block;\n      margin: 0 auto 15px;\n    }\n  }\n}\n\ncode {\n  background-color: #f7f7f7;\n  border-radius: 2px;\n  padding: 2px 5px;\n}\n","// stylelint-disable\n$white: #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #868e96 !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black: #000 !default;\n\n$grays: () !default;\n$grays: map-merge(\n  (\n    '100': $gray-100,\n    '200': $gray-200,\n    '300': $gray-300,\n    '400': $gray-400,\n    '500': $gray-500,\n    '600': $gray-600,\n    '700': $gray-700,\n    '800': $gray-800,\n    '900': $gray-900\n  ),\n  $grays\n);\n\n// The yiq lightness value that determines when the lightness of color changes from \"dark\" to \"light\". Acceptable values are between 0 and 255.\n$yiq-contrasted-threshold: 150 !default;\n\n// Customize the light and dark text colors for use in our YIQ color contrast function.\n$yiq-text-dark: $gray-900 !default;\n$yiq-text-light: $white !default;\n\n$font-weight-thin: 100;\n$font-weight-extralight: 200;\n$font-weight-light: 300;\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-bold: 700;\n\n@mixin letterspacing($units) {\n  letter-spacing: ($units/1000 * 1rem);\n}\n\n// Easings\n$ease-in-out-circ: cubic-bezier(0.27, 0.01, 0.38, 1.06);\n$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);\n\n// Transitions\n$transition-duration: 250ms;\n$transition-base: all $transition-duration $ease-in-out-circ !default;\n$transition-fade: opacity 200ms ease-in-out !default;\n$transition-collapse: height 350ms ease-in-out !default;\n\n@mixin transition($transition...) {\n  @if length($transition) == 0 {\n    transition: $transition-base;\n  } @else {\n    transition: $transition;\n  }\n}\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n@mixin disabled-form-control {\n  cursor: not-allowed !important;\n  color: #c0c0c0;\n\n  * {\n    cursor: not-allowed !important;\n  }\n\n  label {\n    color: #c0c0c0;\n  }\n\n  input {\n    opacity: 0.5;\n  }\n}\n\n@mixin form-control-hint {\n  font-size: 0.75rem;\n  margin: 0.5rem;\n  color: $gray-500;\n}\n\n// Color contrast\n@function color-yiq($color) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= 150) {\n    @return darken($color, 65);\n  } @else {\n    @return #fff;\n  }\n}\n\n@mixin border-top-radius($radius) {\n  border-top-left-radius: $radius;\n  border-top-right-radius: $radius;\n}\n\n@mixin border-right-radius($radius) {\n  border-top-right-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin border-left-radius($radius) {\n  border-top-left-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin text-truncate() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n@mixin hover {\n  @include hover-no-touch {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus {\n  @include hover-no-touch {\n    &:hover,\n    &:focus {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus-active {\n  @include hover-no-touch {\n    &:hover,\n    &:focus,\n    &:active {\n      @content;\n    }\n  }\n}\n\n@mixin hover-not-disabled {\n  @include hover-no-touch {\n    &:not([disabled]):not(.disabled):hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-no-touch {\n  @media (hover: hover) {\n    @content;\n  }\n}\n\n@import '../../styles/themes/talentPortal/tokens';\n\n$zindex-modal-backdrop: 1040 !default;\n$zindex-modal: 1050 !default;\n\n$modal-content-border-color: rgba($black, 0.2) !default;\n$modal-content-border-radius: $border-radius-lg !default;\n$modal-content-box-shadow-xs: 0 0.4rem 0.8rem rgba($black, 0.5) !default;\n$modal-content-box-shadow-sm-up: 0 0.8rem 1.6rem rgba($black, 0.5) !default;\n\n$modal-inner-padding: 3rem 3.5rem !default;\n$modal-footer-padding: 1.5rem 3.5rem !default;\n\n$modal-dialog-margin: 1rem !default;\n$modal-dialog-margin-y-sm-up: 3rem !default;\n\n$modal-title-line-height: $line-height-base !default;\n\n$modal-content-bg: $white !default;\n$modal-content-border-width: $border-width !default;\n$modal-content-box-shadow: $card-box-shadow !default;\n\n$modal-backdrop-bg: $gray-700 !default;\n$modal-backdrop-opacity: 0.12 !default;\n$modal-header-border-color: lighten($gray-700, 50%) !default;\n$modal-footer-border-color: lighten($gray-700, 50%) !default;\n$modal-header-border-width: $modal-content-border-width !default;\n$modal-footer-border-width: $modal-header-border-width !default;\n\n$modal-header-padding: 1.5rem 3.5rem !default;\n\n$modal-lg: 800px !default;\n$modal-md: 500px !default;\n$modal-sm: 300px !default;\n\n$modal-transition: transform 0.3s ease-out !default;\n$transition-fade: opacity 200ms ease-in-out !default;\n\n// .modal-open      - body class for killing the scroll\n// .modal           - container to scroll within\n// .modal-dialog    - positioning shell for the actual modal\n// .modal-content   - actual modal w/ bg and corners and stuff\n\n.fade {\n  @include transition($transition-fade);\n\n  &:not(.show) {\n    opacity: 0;\n  }\n}\n\n.modal-open {\n  // Kill the scroll on the body\n  overflow: hidden;\n\n  .modal {\n    overflow-x: hidden;\n    overflow-y: auto;\n  }\n}\n\n// Container that the modal scrolls within\n.modal {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: $zindex-modal;\n  display: none;\n  overflow: hidden;\n  outline: 0;\n  // We deliberately don't use `-webkit-overflow-scrolling: touch;` due to a\n  // gnarly iOS Safari bug: https://bugs.webkit.org/show_bug.cgi?id=158342\n  // See also https://github.com/twbs/bootstrap/issues/17695\n}\n\n// Shell div to position the modal with bottom padding\n.modal-dialog {\n  position: relative;\n  width: auto;\n  margin: $modal-dialog-margin;\n  // allow clicks to pass through for custom click handling to close modal\n  pointer-events: none;\n\n  // When fading in the modal, animate it to slide down\n  .modal.fade & {\n    transition: $modal-transition;\n    transform: translate(0, -25%);\n  }\n  .modal.show & {\n    transform: translate(0, 0);\n  }\n}\n\n.modal-dialog-centered {\n  display: flex;\n  align-items: center;\n  min-height: calc(100% - (#{$modal-dialog-margin} * 2));\n\n  // Ensure `modal-dialog-centered` extends the full height of the view (IE10/11)\n  &::before {\n    display: block; // IE10\n    height: calc(100vh - (#{$modal-dialog-margin} * 2));\n    content: '';\n  }\n}\n\n// Actual modal\n.modal-content {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 100%; // Ensure `.modal-content` extends the full width of the parent `.modal-dialog`\n  // counteract the pointer-events: none; in the .modal-dialog\n  pointer-events: auto;\n  background-color: $modal-content-bg;\n  background-clip: padding-box;\n  border: $modal-content-border-width solid $modal-content-border-color;\n  // Remove focus outline from opened modal\n  outline: 0;\n\n  background-color: $modal-content-bg;\n  border: none;\n  border-radius: $border-radius-lg;\n  box-shadow: $modal-content-box-shadow;\n}\n\n// Modal background\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: $zindex-modal-backdrop;\n  background-color: $modal-backdrop-bg;\n  transition: opacity 0.2s ease-in-out;\n\n  // Fade for backdrop\n  &.fade {\n    opacity: 0;\n  }\n  &.show {\n    opacity: $modal-backdrop-opacity;\n  }\n}\n\n.modal-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between; // Put modal header elements (title and dismiss) on opposite ends\n  padding: $modal-header-padding;\n  border-bottom: $modal-header-border-width solid $modal-header-border-color;\n  @include border-top-radius($modal-content-border-radius);\n\n  .close {\n    float: right;\n    font-size: 2.4rem;\n    font-weight: 300;\n    line-height: 1;\n    color: #000;\n    text-shadow: 0 1px 0 #fff;\n    opacity: 0.5;\n    padding: 0;\n    background-color: transparent;\n    border: 0;\n    appearance: none;\n    outline: 0;\n\n    @include hover-focus {\n      color: #000;\n      text-decoration: none;\n      opacity: 0.75;\n    }\n\n    // Opinionated: add \"hand\" cursor to non-disabled .close elements\n    &:not(:disabled):not(.disabled) {\n      cursor: pointer;\n    }\n  }\n}\n\n// Title text within header\n.modal-title {\n  margin-bottom: 0;\n  line-height: $modal-title-line-height;\n}\n\n.modal-body {\n  position: relative;\n  // Enable `flex-grow: 1` so that the body take up as much space as possible\n  // when should there be a fixed height on `.modal-dialog`.\n  flex: 1 1 auto;\n  padding: $modal-inner-padding;\n}\n\n.modal-footer {\n  display: flex;\n  align-items: center; // vertically center\n  justify-content: flex-end; // Right align buttons with flex property because text-align doesn't work on flex items\n  padding: $modal-footer-padding;\n  border-top: $modal-footer-border-width solid $modal-footer-border-color;\n\n  // Easily place margin between footer elements\n  > :not(:first-child) {\n    margin-left: 0.4rem;\n  }\n  > :not(:last-child) {\n    margin-right: 0.4rem;\n  }\n}\n\n// Measure scrollbar width for padding body during modal show/hide\n.modal-scrollbar-measure {\n  position: absolute;\n  top: -9999px;\n  width: 50px;\n  height: 50px;\n  overflow: scroll;\n}\n\n// Scale up the modal\n@include media-breakpoint-up(sm) {\n  // Automatically set modal's width for larger viewports\n  .modal-dialog {\n    max-width: $modal-md;\n    margin: $modal-dialog-margin-y-sm-up auto;\n  }\n\n  .modal-dialog-centered {\n    min-height: calc(100% - (#{$modal-dialog-margin-y-sm-up} * 2));\n\n    &::before {\n      height: calc(100vh - (#{$modal-dialog-margin-y-sm-up} * 2));\n    }\n  }\n\n  .modal-content {\n    box-shadow: $modal-content-box-shadow;\n  }\n\n  .modal-sm {\n    max-width: $modal-sm;\n  }\n}\n\n@include media-breakpoint-up(lg) {\n  .modal-lg {\n    max-width: $modal-lg;\n  }\n}\n","// stylelint-disable\n$white: #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #868e96 !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black: #000 !default;\n\n$grays: () !default;\n$grays: map-merge(\n  (\n    '100': $gray-100,\n    '200': $gray-200,\n    '300': $gray-300,\n    '400': $gray-400,\n    '500': $gray-500,\n    '600': $gray-600,\n    '700': $gray-700,\n    '800': $gray-800,\n    '900': $gray-900\n  ),\n  $grays\n);\n\n// The yiq lightness value that determines when the lightness of color changes from \"dark\" to \"light\". Acceptable values are between 0 and 255.\n$yiq-contrasted-threshold: 150 !default;\n\n// Customize the light and dark text colors for use in our YIQ color contrast function.\n$yiq-text-dark: $gray-900 !default;\n$yiq-text-light: $white !default;\n\n$font-weight-thin: 100;\n$font-weight-extralight: 200;\n$font-weight-light: 300;\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-bold: 700;\n\n@mixin letterspacing($units) {\n  letter-spacing: ($units/1000 * 1rem);\n}\n\n// Easings\n$ease-in-out-circ: cubic-bezier(0.27, 0.01, 0.38, 1.06);\n$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);\n\n// Transitions\n$transition-duration: 250ms;\n$transition-base: all $transition-duration $ease-in-out-circ !default;\n$transition-fade: opacity 200ms ease-in-out !default;\n$transition-collapse: height 350ms ease-in-out !default;\n\n@mixin transition($transition...) {\n  @if length($transition) == 0 {\n    transition: $transition-base;\n  } @else {\n    transition: $transition;\n  }\n}\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n@mixin disabled-form-control {\n  cursor: not-allowed !important;\n  color: #c0c0c0;\n\n  * {\n    cursor: not-allowed !important;\n  }\n\n  label {\n    color: #c0c0c0;\n  }\n\n  input {\n    opacity: 0.5;\n  }\n}\n\n@mixin form-control-hint {\n  font-size: 0.75rem;\n  margin: 0.5rem;\n  color: $gray-500;\n}\n\n// Color contrast\n@function color-yiq($color) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= 150) {\n    @return darken($color, 65);\n  } @else {\n    @return #fff;\n  }\n}\n\n@mixin border-top-radius($radius) {\n  border-top-left-radius: $radius;\n  border-top-right-radius: $radius;\n}\n\n@mixin border-right-radius($radius) {\n  border-top-right-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin border-left-radius($radius) {\n  border-top-left-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin text-truncate() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n@mixin hover {\n  @include hover-no-touch {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus {\n  @include hover-no-touch {\n    &:hover,\n    &:focus {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus-active {\n  @include hover-no-touch {\n    &:hover,\n    &:focus,\n    &:active {\n      @content;\n    }\n  }\n}\n\n@mixin hover-not-disabled {\n  @include hover-no-touch {\n    &:not([disabled]):not(.disabled):hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-no-touch {\n  @media (hover: hover) {\n    @content;\n  }\n}\n\n@import '../../styles/themes/talentPortal/tokens';\n\n$body-bg: $white !default;\n$body-color: $gray-700 !default;\n\n$progress-height: 1rem !default;\n$progress-font-size: 1rem !default;\n$progress-bg: lighten($gray-700, 58%) !default;\n$progress-border-radius: 2rem !default;\n$progress-box-shadow: inset 0 0.16rem 0.16rem rgba($gray-700, 0.15) !default;\n$progress-bar-color: $white !default;\n$progress-bar-bg: $primary !default;\n$progress-bar-animation-timing: 1s linear infinite !default;\n$progress-bar-transition: width 0.6s ease !default;\n$progress-label-font-size: 1.3rem !default;\n$progress-sm-height: 0.5rem !default;\n$progress-lg-height: 1.5rem !default;\n\n@keyframes progress-bar-stripes {\n  from {\n    background-position: $progress-height 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n\n.progress {\n  display: flex;\n  height: $progress-height;\n  overflow: hidden; // force rounded corners by cropping it\n  font-size: $progress-font-size;\n  background-color: $progress-bg;\n  border-radius: $progress-border-radius;\n  box-shadow: $progress-box-shadow;\n}\n\n.progress-bar {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  color: $progress-bar-color;\n  text-align: center;\n  white-space: nowrap;\n  background-color: $progress-bar-bg;\n  @include transition($progress-bar-transition);\n}\n\n.progress-bar-striped {\n  @include gradient-striped();\n  background-size: $progress-height $progress-height;\n}\n\n.progress-bar-animated {\n  animation: progress-bar-stripes $progress-bar-animation-timing;\n}\n\n// Progress bars adjustments\n\n.progress-wrapper {\n  position: relative;\n  color: $body-color;\n\n  .progress-label {\n    font-size: $progress-label-font-size;\n  }\n\n  .progress-value {\n    position: absolute;\n    top: 6px;\n    right: 0;\n    color: $body-color;\n  }\n}\n\n.progress {\n  display: flex;\n  overflow: hidden; // force rounded corners by cropping it\n  height: $progress-height;\n  font-size: $progress-font-size;\n  line-height: $progress-height;\n  background-color: $progress-bg;\n  border-radius: $progress-border-radius;\n  box-shadow: $progress-box-shadow;\n}\n\n.progress-sm {\n  height: $progress-sm-height;\n}\n\n.progress-lg {\n  height: $progress-lg-height;\n  .progress-bar {\n    height: $progress-lg-height;\n  }\n}\n\n.progress-bar {\n  height: $progress-height;\n  line-height: $progress-height;\n  color: $progress-bar-color;\n  background-color: $progress-bar-bg;\n  @include transition($progress-bar-transition);\n}\n\n.progress-bar-striped {\n  @include gradient-striped();\n  background-size: $progress-height $progress-height;\n}\n\n.progress-bar-animated {\n  animation: progress-bar-stripes $progress-bar-animation-timing;\n}\n\n@each $color, $value in $theme-colors {\n  @include bg-variant('.bg-#{$color}', $value);\n}\n","// stylelint-disable\n$white: #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #868e96 !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black: #000 !default;\n\n$grays: () !default;\n$grays: map-merge(\n  (\n    '100': $gray-100,\n    '200': $gray-200,\n    '300': $gray-300,\n    '400': $gray-400,\n    '500': $gray-500,\n    '600': $gray-600,\n    '700': $gray-700,\n    '800': $gray-800,\n    '900': $gray-900\n  ),\n  $grays\n);\n\n// The yiq lightness value that determines when the lightness of color changes from \"dark\" to \"light\". Acceptable values are between 0 and 255.\n$yiq-contrasted-threshold: 150 !default;\n\n// Customize the light and dark text colors for use in our YIQ color contrast function.\n$yiq-text-dark: $gray-900 !default;\n$yiq-text-light: $white !default;\n\n$font-weight-thin: 100;\n$font-weight-extralight: 200;\n$font-weight-light: 300;\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-bold: 700;\n\n@mixin letterspacing($units) {\n  letter-spacing: ($units/1000 * 1rem);\n}\n\n// Easings\n$ease-in-out-circ: cubic-bezier(0.27, 0.01, 0.38, 1.06);\n$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);\n\n// Transitions\n$transition-duration: 250ms;\n$transition-base: all $transition-duration $ease-in-out-circ !default;\n$transition-fade: opacity 200ms ease-in-out !default;\n$transition-collapse: height 350ms ease-in-out !default;\n\n@mixin transition($transition...) {\n  @if length($transition) == 0 {\n    transition: $transition-base;\n  } @else {\n    transition: $transition;\n  }\n}\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n@mixin disabled-form-control {\n  cursor: not-allowed !important;\n  color: #c0c0c0;\n\n  * {\n    cursor: not-allowed !important;\n  }\n\n  label {\n    color: #c0c0c0;\n  }\n\n  input {\n    opacity: 0.5;\n  }\n}\n\n@mixin form-control-hint {\n  font-size: 0.75rem;\n  margin: 0.5rem;\n  color: $gray-500;\n}\n\n// Color contrast\n@function color-yiq($color) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= 150) {\n    @return darken($color, 65);\n  } @else {\n    @return #fff;\n  }\n}\n\n@mixin border-top-radius($radius) {\n  border-top-left-radius: $radius;\n  border-top-right-radius: $radius;\n}\n\n@mixin border-right-radius($radius) {\n  border-top-right-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin border-left-radius($radius) {\n  border-top-left-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin text-truncate() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n@mixin hover {\n  @include hover-no-touch {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus {\n  @include hover-no-touch {\n    &:hover,\n    &:focus {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus-active {\n  @include hover-no-touch {\n    &:hover,\n    &:focus,\n    &:active {\n      @content;\n    }\n  }\n}\n\n@mixin hover-not-disabled {\n  @include hover-no-touch {\n    &:not([disabled]):not(.disabled):hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-no-touch {\n  @media (hover: hover) {\n    @content;\n  }\n}\n\n@import '../../styles/themes/talentPortal/tokens';\n\n$form-checkbox-indicator-border-radius: 2px !default;\n$form-checkbox-indicator-transition: transform $transition-duration $ease-in-out-circ,\n  border $transition-duration $ease-in-out-circ !default;\n\n$custom-checkbox-indicator-indeterminate-bg: $component-active-bg !default;\n$custom-checkbox-indicator-indeterminate-color: $custom-control-indicator-checked-color !default;\n$custom-checkbox-indicator-icon-indeterminate: str-replace(\n  url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3E%3Cpath stroke='#{$custom-checkbox-indicator-indeterminate-color}' d='M0 2h4'/%3E%3C/svg%3E\"),\n  '#',\n  '%23'\n) !default;\n$custom-checkbox-indicator-indeterminate-box-shadow: none !default;\n\n// Custom toggle\n$custom-toggle-width: 5rem !default;\n$custom-toggle-height: 2.8rem !default;\n$custom-toggle-border-width: 0.1rem !default;\n$custom-toggle-border: $custom-toggle-border-width solid $form-control-border-color !default;\n$custom-toggle-border-radius: 100px !default;\n\n$custom-toggle-focus-box-shadow: 0 0.5008rem 1.1504rem rgba($success, 0.1),\n  0 0.2496rem 0.2rem rgba($black, 0.06) !default;\n\n$custom-toggle-checked-background: $primary !default;\n$custom-toggle-checked-border-color: $custom-toggle-checked-background !default;\n$custom-toggle-checked-knob-background: $white !default;\n\n$custom-toggle-knob-width: 2rem !default;\n$custom-toggle-knob-height: 2rem !default;\n$custom-toggle-knob-border-radius: 10rem !default;\n$custom-toggle-knob-active-width: 2.6rem !default;\n\n$custom-toggle-width-sm: 3.5rem !default;\n$custom-toggle-height-sm: 1.8rem !default;\n$custom-toggle-knob-width-sm: 1.2rem !default;\n$custom-toggle-knob-active-width-sm: 1.6rem !default;\n$custom-toggle-knob-height-sm: 1.2rem !default;\n\n@mixin toggle-variant($parent, $color) {\n  #{$parent} {\n    label {\n      // Background\n      &::before {\n        background: $color;\n        border-color: $color;\n      }\n\n      // Knob\n      &::after {\n        background: color-yiq($color);\n      }\n    }\n  }\n}\n\n.checkbox-container {\n  display: flex;\n  align-items: center;\n}\n\n.form-checkbox {\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  min-height: (1rem * $line-height-base);\n  padding-left: $custom-control-gutter;\n\n  &:hover:not(.disabled) {\n    cursor: pointer;\n\n    label::before {\n      border-color: $form-control-hover-border-color;\n    }\n  }\n\n  input {\n    position: absolute;\n    z-index: -1; // Put the input behind the label so it doesn't overlay text\n    opacity: 0;\n    margin: 0;\n\n    &:checked ~ label {\n      &::before {\n        color: $custom-control-indicator-checked-color;\n        border-color: transparent;\n        background-color: $custom-control-indicator-checked-bg;\n        background-image: none;\n      }\n\n      &::after {\n        opacity: 1;\n        transform: rotate(45deg) scale(1);\n      }\n    }\n\n    &:focus ~ label::before {\n      box-shadow: $form-control-focus-box-shadow;\n    }\n\n    &:active ~ label::before {\n      color: $custom-control-indicator-active-color;\n      background-color: $custom-control-indicator-active-bg;\n      box-shadow: $custom-control-indicator-active-box-shadow;\n    }\n\n    &:disabled {\n      ~ label {\n        cursor: not-allowed;\n\n        &::before {\n          background-color: $form-control-disabled-bg;\n        }\n      }\n\n      ~ .description {\n        cursor: not-allowed;\n      }\n\n      &:checked ~ label {\n        &::before {\n          background: $form-control-disabled-bg;\n          border-color: $border-color;\n        }\n\n        &::after {\n          border-color: $border-color;\n        }\n      }\n    }\n\n    &:indeterminate ~ label {\n      &::before {\n        border: none;\n        background-color: $custom-checkbox-indicator-indeterminate-bg;\n        box-shadow: $custom-checkbox-indicator-indeterminate-box-shadow;\n      }\n\n      &::after {\n        content: '';\n        position: absolute;\n        transform: scale(1);\n        background-image: $custom-checkbox-indicator-icon-indeterminate;\n        background-color: $white;\n        border: none;\n        width: 10px;\n        height: 2px;\n        top: 11px;\n        left: 4px;\n        opacity: 1;\n        transition: none;\n      }\n    }\n  }\n\n  label {\n    position: static;\n    margin-bottom: 0;\n    cursor: pointer;\n\n    // Background-color and (when enabled) gradient\n    &::before {\n      box-sizing: border-box;\n      position: absolute;\n      display: block;\n      pointer-events: all;\n      content: '';\n      user-select: none;\n      top: (($line-height-base - $custom-control-indicator-size) / 2);\n      left: 0;\n      width: $custom-control-indicator-size;\n      height: $custom-control-indicator-size;\n      background-color: $form-control-bg;\n      border: $custom-control-indicator-border;\n      transition: all 250ms cubic-bezier(0.27, 0.01, 0.38, 1.06);\n      border-radius: $form-checkbox-indicator-border-radius;\n    }\n\n    // Foreground (icon)\n    &::after {\n      box-sizing: border-box;\n      position: absolute;\n      display: block;\n      content: '';\n      background-repeat: no-repeat;\n      background-position: center center;\n\n      content: '';\n      top: 5px;\n      left: 7px;\n      width: 5px;\n      height: 11px;\n      opacity: 0;\n      transform: rotate(45deg) scale(0);\n      border-right: 2px solid $white;\n      border-bottom: 2px solid $white;\n      transition: $form-checkbox-indicator-transition;\n      transition-delay: 100ms;\n    }\n  }\n}\n\n.inline {\n  display: inline-block;\n  margin-right: $custom-control-spacer-x;\n}\n\n.left-label {\n  margin-right: 1rem;\n}\n\n.as-toggle {\n  position: relative;\n  padding-left: ($custom-toggle-width + 1rem);\n  min-height: $custom-toggle-height;\n\n  @each $color, $value in $grays {\n    @include toggle-variant('&.left-#{$color}', $value);\n  }\n  @each $color, $value in $colors {\n    @include toggle-variant('&.left-#{$color}', $value);\n  }\n  @each $color, $value in $theme-colors {\n    @include toggle-variant('&.left-#{$color}', $value);\n  }\n\n  label {\n    // Background\n    &::before {\n      position: absolute;\n      top: 0;\n      left: 0;\n      display: block;\n      width: $custom-toggle-width;\n      height: $custom-toggle-height;\n      background: $form-control-bg;\n      border-radius: $custom-toggle-border-radius;\n      border: $custom-toggle-border;\n    }\n\n    // Knob\n    &::after {\n      content: '';\n      position: absolute;\n      top: 0.4rem;\n      left: 0.4rem;\n      width: $custom-toggle-knob-width;\n      height: $custom-toggle-knob-height;\n      background: $form-control-border-color;\n      border-radius: $custom-toggle-knob-border-radius;\n      transition: 350ms;\n      opacity: 1;\n      transform: none;\n      border: none;\n    }\n  }\n\n  input {\n    // Checked state\n    &:checked ~ label {\n      // Background\n      &::before {\n        background: $custom-toggle-checked-background;\n        border-color: $custom-toggle-checked-border-color;\n      }\n\n      // Knob\n      &::after {\n        left: $custom-toggle-width - $custom-toggle-border-width - 0.3rem;\n        transform: translateX(-100%);\n        background: $custom-toggle-checked-knob-background;\n      }\n    }\n\n    // Disabled and checked state\n    &:checked:disabled ~ label {\n      &::before {\n        background: $form-control-disabled-bg;\n        border-color: $border-color;\n      }\n\n      &::after {\n        background: $border-color;\n      }\n    }\n\n    // Active state\n    &:active:not(:disabled) ~ label {\n      // Knob\n      &::after {\n        width: $custom-toggle-knob-active-width;\n      }\n    }\n\n    // Active, but not checked.\n    &:active:not(:checked) ~ label {\n      &::before {\n        background-color: $form-control-bg;\n      }\n    }\n\n    // Disabled and active.\n    &:disabled:active ~ label {\n      &::before {\n        background-color: $form-control-disabled-bg;\n      }\n    }\n\n    // Focus state\n    &:focus {\n      & ~ label {\n        &::before {\n          box-shadow: $custom-toggle-focus-box-shadow;\n        }\n      }\n\n      &:not(:checked) ~ label {\n        &::before {\n          box-shadow: $form-control-focus-box-shadow;\n        }\n      }\n    }\n  }\n\n  &.smaller {\n    padding-left: 4.2rem;\n\n    label {\n      // Background\n      &::before {\n        top: 0.3rem;\n        position: absolute;\n        display: block;\n        width: $custom-toggle-width-sm;\n        height: $custom-toggle-height-sm;\n        background: $form-control-bg;\n        border-radius: $custom-toggle-border-radius;\n        border: $custom-toggle-border;\n      }\n\n      // Knob\n      &::after {\n        content: '';\n        position: absolute;\n        top: 0.6rem;\n        left: 0.3rem;\n        width: $custom-toggle-knob-width-sm;\n        height: $custom-toggle-knob-height-sm;\n      }\n    }\n\n    // Checked state\n    input:checked ~ label {\n      // Knob\n      &::after {\n        left: $custom-toggle-width-sm - $custom-toggle-border-width - 0.3rem;\n      }\n    }\n\n    // Active state\n    input:active:not(:disabled) ~ label {\n      // Knob\n      &::after {\n        width: $custom-toggle-knob-active-width-sm;\n      }\n    }\n  }\n\n  & ~ :global(.form-control-descenders) {\n    .form-control-required,\n    .form-control-error {\n      margin-left: ($custom-toggle-width + 1rem);\n    }\n  }\n}\n\n:global {\n  .form-control-required,\n  .form-control-error {\n    margin: 0 0.8rem 0.8rem $custom-control-gutter;\n  }\n}\n\n@include form-validation-state('valid', $success);\n@include form-validation-state('invalid', $danger);\n","// stylelint-disable\n$white: #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #868e96 !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black: #000 !default;\n\n$grays: () !default;\n$grays: map-merge(\n  (\n    '100': $gray-100,\n    '200': $gray-200,\n    '300': $gray-300,\n    '400': $gray-400,\n    '500': $gray-500,\n    '600': $gray-600,\n    '700': $gray-700,\n    '800': $gray-800,\n    '900': $gray-900\n  ),\n  $grays\n);\n\n// The yiq lightness value that determines when the lightness of color changes from \"dark\" to \"light\". Acceptable values are between 0 and 255.\n$yiq-contrasted-threshold: 150 !default;\n\n// Customize the light and dark text colors for use in our YIQ color contrast function.\n$yiq-text-dark: $gray-900 !default;\n$yiq-text-light: $white !default;\n\n$font-weight-thin: 100;\n$font-weight-extralight: 200;\n$font-weight-light: 300;\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-bold: 700;\n\n@mixin letterspacing($units) {\n  letter-spacing: ($units/1000 * 1rem);\n}\n\n// Easings\n$ease-in-out-circ: cubic-bezier(0.27, 0.01, 0.38, 1.06);\n$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);\n\n// Transitions\n$transition-duration: 250ms;\n$transition-base: all $transition-duration $ease-in-out-circ !default;\n$transition-fade: opacity 200ms ease-in-out !default;\n$transition-collapse: height 350ms ease-in-out !default;\n\n@mixin transition($transition...) {\n  @if length($transition) == 0 {\n    transition: $transition-base;\n  } @else {\n    transition: $transition;\n  }\n}\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n@mixin disabled-form-control {\n  cursor: not-allowed !important;\n  color: #c0c0c0;\n\n  * {\n    cursor: not-allowed !important;\n  }\n\n  label {\n    color: #c0c0c0;\n  }\n\n  input {\n    opacity: 0.5;\n  }\n}\n\n@mixin form-control-hint {\n  font-size: 0.75rem;\n  margin: 0.5rem;\n  color: $gray-500;\n}\n\n// Color contrast\n@function color-yiq($color) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= 150) {\n    @return darken($color, 65);\n  } @else {\n    @return #fff;\n  }\n}\n\n@mixin border-top-radius($radius) {\n  border-top-left-radius: $radius;\n  border-top-right-radius: $radius;\n}\n\n@mixin border-right-radius($radius) {\n  border-top-right-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin border-left-radius($radius) {\n  border-top-left-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin text-truncate() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n@mixin hover {\n  @include hover-no-touch {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus {\n  @include hover-no-touch {\n    &:hover,\n    &:focus {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus-active {\n  @include hover-no-touch {\n    &:hover,\n    &:focus,\n    &:active {\n      @content;\n    }\n  }\n}\n\n@mixin hover-not-disabled {\n  @include hover-no-touch {\n    &:not([disabled]):not(.disabled):hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-no-touch {\n  @media (hover: hover) {\n    @content;\n  }\n}\n\n@import '../../styles/themes/talentPortal/tokens';\n\n$input-group-padding-y: 12px !default;\n$input-group-padding-x: 14px !default;\n$input-group-addon-bg: lighten($form-control-border-color, 19%) !default;\n$input-group-addon-border-color: $form-control-border-color !default;\n$input-group-addon-color: $input-group-addon-border-color !default;\n\n// stylelint-disable selector-no-qualifying-type\n\n//\n// Base styles\n//\n\n.input-group {\n  position: relative;\n  display: flex;\n  flex-wrap: wrap; // For form validation feedback\n  align-items: stretch;\n  width: 100%;\n\n  :global(.form-control),\n  select,\n  > .custom-file {\n    position: relative; // For focus state's z-index\n    flex: 1 1 auto;\n    // Add width 1% and flex-basis auto to ensure that button will not wrap out\n    // the column. Applies to IE Edge+ and Firefox. Chrome does not require this.\n    width: 1%;\n    margin-bottom: 0;\n\n    + :global(.form-control),\n    + select,\n    + .custom-file {\n      margin-left: -$form-control-border-width;\n    }\n  }\n\n  // Bring the \"active\" form control to the top of surrounding elements\n  :global(.form-control):focus,\n  select:focus,\n  > .custom-file .custom-file-input:focus ~ .custom-file-label {\n    z-index: 3;\n  }\n\n  // Bring the custom file input above the label\n  > .custom-file .custom-file-input:focus {\n    z-index: 4;\n  }\n\n  > :global(.form-control),\n  select {\n    &:not(:last-child) {\n      @include border-right-radius(0);\n    }\n    &:not(:first-child) {\n      @include border-left-radius(0);\n    }\n  }\n\n  // Custom file inputs have more complex markup, thus requiring different\n  // border-radius overrides.\n  > .custom-file {\n    display: flex;\n    align-items: center;\n\n    &:not(:last-child) .custom-file-label,\n    &:not(:last-child) .custom-file-label::after {\n      @include border-right-radius(0);\n    }\n    &:not(:first-child) .custom-file-label,\n    &:not(:first-child) .custom-file-label::after {\n      @include border-left-radius(0);\n    }\n  }\n\n  // Seamless input groups\n  &.input-group-seamless {\n    :global(.form-control) {\n      border-radius: $form-control-border-radius;\n    }\n\n    > .input-group-leading,\n    > .input-group-trailing {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      z-index: 4;\n\n      .input-group-text {\n        padding: $input-group-padding-y $input-group-padding-x;\n        background: transparent;\n        border: none;\n      }\n    }\n\n    > .input-group-trailing {\n      right: 0;\n    }\n\n    // > .input-group-middle {\n    //   right: 0;\n    //   left: 0;\n    // }\n\n    > .input-group-leading {\n      left: 0;\n    }\n\n    > :global(.form-control),\n    select {\n      &:not(:last-child) {\n        padding-right: 35px;\n      }\n      &:not(:first-child) {\n        padding-left: 35px;\n      }\n    }\n  }\n}\n\n// Prepend and append\n//\n// While it requires one extra layer of HTML for each, dedicated prepend and\n// append elements allow us to 1) be less clever, 2) simplify our selectors, and\n// 3) support HTML5 form validation.\n\n.input-group-leading,\n.input-group-trailing,\n.input-group-prepend,\n.input-group-append {\n  display: flex;\n  justify-content: center;\n  min-width: 35px;\n\n  // Ensure buttons are always above inputs for more visually pleasing borders.\n  // This isn't needed for `.input-group-text` since it shares the same border-color\n  // as our inputs.\n  button {\n    position: relative;\n    z-index: 2;\n  }\n\n  button + button,\n  button + .input-group-text,\n  .input-group-text + .input-group-text,\n  .input-group-text + button {\n    margin-left: -$form-control-border-width;\n  }\n}\n\n.input-group-prepend {\n  margin-right: -$form-control-border-width;\n}\n.input-group-append {\n  margin-left: -$form-control-border-width;\n}\n\n// Textual addons\n//\n// Serves as a catch-all element for any text or radio/checkbox input you wish\n// to prepend or append to an input.\n\n.input-group-text {\n  display: flex;\n  align-items: center;\n  padding: $form-control-padding-y $form-control-padding-x;\n  margin-bottom: 0; // Allow use of <label> elements by overriding our default margin-bottom\n  font-size: $font-size-base; // Match inputs\n  font-weight: $font-weight-light;\n  color: $input-group-addon-color;\n  text-align: center;\n  white-space: nowrap;\n  background-color: $input-group-addon-bg;\n  border: $form-control-border-width solid $input-group-addon-border-color;\n  border-radius: $form-control-border-radius;\n\n  // Nuke default margins from checkboxes and radios to vertically center within.\n  input[type='radio'],\n  input[type='checkbox'] {\n    margin-top: 0;\n  }\n}\n\n// Sizing\n//\n// Remix the default form control sizing classes into new ones for easier\n// manipulation.\n\n.input-group-lg :global(.form-control),\n.input-group-lg > .input-group-prepend > .input-group-text,\n.input-group-lg > .input-group-append > .input-group-text,\n.input-group-lg > .input-group-prepend > button,\n.input-group-lg > .input-group-append > button {\n  height: $form-control-height-lg;\n  padding: $form-control-padding-y-lg $form-control-padding-x-lg;\n  font-size: $font-size-lg;\n  line-height: $form-control-line-height-lg;\n  border-radius: $form-control-border-radius-lg;\n\n  @extend :global(.form-control-lg) !optional;\n}\n\n.input-group-sm :global(.form-control),\n.input-group-sm > .input-group-prepend > .input-group-text,\n.input-group-sm > .input-group-append > .input-group-text,\n.input-group-sm > .input-group-prepend > button,\n.input-group-sm > .input-group-append > button {\n  height: $form-control-height-sm;\n  padding: $form-control-padding-y-sm $form-control-padding-x-sm;\n  font-size: $font-size-sm;\n  line-height: $form-control-line-height-sm;\n  border-radius: $form-control-border-radius-sm;\n\n  @extend :global(.form-control-sm) !optional;\n}\n\n// Prepend and append rounded corners\n//\n// These rulesets must come after the sizing ones to properly override sm and lg\n// border-radius values when extending. They're more specific than we'd like\n// with the `.input-group >` part, but without it, we cannot override the sizing.\n\n.input-group > .input-group-prepend > button,\n.input-group > .input-group-prepend > .input-group-text,\n.input-group > .input-group-append:not(:last-child) > button,\n.input-group > .input-group-append:not(:last-child) > .input-group-text,\n.input-group > .input-group-append:last-child > button:not(:last-child):not(.dropdown-toggle),\n.input-group > .input-group-append:last-child > .input-group-text:not(:last-child) {\n  @include border-right-radius(0);\n}\n\n.input-group > .input-group-append > button,\n.input-group > .input-group-append > .input-group-text,\n.input-group > .input-group-prepend:not(:first-child) > button,\n.input-group > .input-group-prepend:not(:first-child) > .input-group-text,\n.input-group > .input-group-prepend:first-child > button:not(:first-child),\n.input-group > .input-group-prepend:first-child > .input-group-text:not(:first-child) {\n  @include border-left-radius(0);\n}\n\n///////////////////\n\n// stylelint-disable selector-no-qualifying-type\n\n.input-group > .input-group-middle > button,\n.input-group > .input-group-middle > .input-group-text {\n  border-left: 0;\n  border-right: 0;\n  border-radius: 0;\n}\n\n.input-group-middle {\n  display: flex;\n}\n","// stylelint-disable\n$white: #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #868e96 !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black: #000 !default;\n\n$grays: () !default;\n$grays: map-merge(\n  (\n    '100': $gray-100,\n    '200': $gray-200,\n    '300': $gray-300,\n    '400': $gray-400,\n    '500': $gray-500,\n    '600': $gray-600,\n    '700': $gray-700,\n    '800': $gray-800,\n    '900': $gray-900\n  ),\n  $grays\n);\n\n// The yiq lightness value that determines when the lightness of color changes from \"dark\" to \"light\". Acceptable values are between 0 and 255.\n$yiq-contrasted-threshold: 150 !default;\n\n// Customize the light and dark text colors for use in our YIQ color contrast function.\n$yiq-text-dark: $gray-900 !default;\n$yiq-text-light: $white !default;\n\n$font-weight-thin: 100;\n$font-weight-extralight: 200;\n$font-weight-light: 300;\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-bold: 700;\n\n@mixin letterspacing($units) {\n  letter-spacing: ($units/1000 * 1rem);\n}\n\n// Easings\n$ease-in-out-circ: cubic-bezier(0.27, 0.01, 0.38, 1.06);\n$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);\n\n// Transitions\n$transition-duration: 250ms;\n$transition-base: all $transition-duration $ease-in-out-circ !default;\n$transition-fade: opacity 200ms ease-in-out !default;\n$transition-collapse: height 350ms ease-in-out !default;\n\n@mixin transition($transition...) {\n  @if length($transition) == 0 {\n    transition: $transition-base;\n  } @else {\n    transition: $transition;\n  }\n}\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n@mixin disabled-form-control {\n  cursor: not-allowed !important;\n  color: #c0c0c0;\n\n  * {\n    cursor: not-allowed !important;\n  }\n\n  label {\n    color: #c0c0c0;\n  }\n\n  input {\n    opacity: 0.5;\n  }\n}\n\n@mixin form-control-hint {\n  font-size: 0.75rem;\n  margin: 0.5rem;\n  color: $gray-500;\n}\n\n// Color contrast\n@function color-yiq($color) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= 150) {\n    @return darken($color, 65);\n  } @else {\n    @return #fff;\n  }\n}\n\n@mixin border-top-radius($radius) {\n  border-top-left-radius: $radius;\n  border-top-right-radius: $radius;\n}\n\n@mixin border-right-radius($radius) {\n  border-top-right-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin border-left-radius($radius) {\n  border-top-left-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin text-truncate() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n@mixin hover {\n  @include hover-no-touch {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus {\n  @include hover-no-touch {\n    &:hover,\n    &:focus {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus-active {\n  @include hover-no-touch {\n    &:hover,\n    &:focus,\n    &:active {\n      @content;\n    }\n  }\n}\n\n@mixin hover-not-disabled {\n  @include hover-no-touch {\n    &:not([disabled]):not(.disabled):hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-no-touch {\n  @media (hover: hover) {\n    @content;\n  }\n}\n\n@import '../../styles/themes/talentPortal/tokens';\n\n$form-radio-indicator-checked-disabled-bg: rgba($primary, 0.5) !default;\n$form-radio-indicator-disabled-bg: $gray-200 !default;\n$form-radio-indicator-checked-box-shadow: none !default;\n$form-radio-indicator-focus-box-shadow: $form-control-focus-box-shadow !default;\n$form-radio-indicator-border-radius: 50% !default;\n$form-radio-indicator-icon-checked: str-replace(\n  url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3E%3Ccircle r='3' fill='#{$custom-control-indicator-checked-color}'/%3E%3C/svg%3E\"),\n  '#',\n  '%23'\n) !default;\n\n.form-control-container {\n  display: inline-flex;\n  flex-direction: column;\n\n  &.inline {\n    .form-radio-group {\n      flex-direction: row;\n      align-items: flex-start;\n\n      label[class*='form-radio'] {\n        display: inline-flex;\n        margin-right: $custom-control-spacer-x;\n\n        &:last-child {\n          margin-right: 0;\n        }\n      }\n    }\n  }\n}\n\n.form-radio-group {\n  display: inline-flex;\n  flex-direction: column;\n}\n\n.form-radio {\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  min-height: (1rem * $line-height-base);\n  padding-left: $custom-control-gutter;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  label {\n    margin-bottom: 0;\n    position: static;\n\n    &:hover {\n      cursor: pointer;\n    }\n\n    // Background-color and (when enabled) gradient\n    &::before {\n      position: absolute;\n      display: block;\n      pointer-events: all; //none\n      content: '';\n      user-select: none;\n      top: (($line-height-base - $custom-control-indicator-size) / 2);\n      left: 0;\n      width: $custom-control-indicator-size;\n      height: $custom-control-indicator-size;\n      background-color: $form-control-bg;\n      border: $custom-control-indicator-border;\n      transition: all 250ms cubic-bezier(0.27, 0.01, 0.38, 1.06);\n      box-shadow: $form-control-box-shadow;\n      border-radius: $form-radio-indicator-border-radius;\n      box-sizing: border-box;\n    }\n\n    // Foreground (icon)\n    &::after {\n      content: '';\n      border-radius: 50%;\n      transform: scale(0);\n      background-image: none !important;\n      position: absolute;\n      background: #fff;\n      width: 8px;\n      height: 8px;\n      top: 8px;\n      left: 5px;\n      transition: all 250ms cubic-bezier(0.27, 0.01, 0.38, 1.06);\n      transition-delay: 0.1s;\n      opacity: 0;\n      transform: scale(0);\n      display: block;\n      background-repeat: no-repeat;\n      background-position: center center;\n      box-sizing: border-box;\n    }\n  }\n\n  input {\n    position: absolute;\n    z-index: -1; // Put the input behind the label so it doesn't overlay text\n    opacity: 0;\n\n    &:checked ~ label {\n      &::after {\n        background-image: $form-radio-indicator-icon-checked;\n        opacity: 1;\n        transform: scale(1);\n      }\n\n      &::before {\n        color: $custom-control-indicator-checked-color;\n        border-color: transparent;\n        background-color: $custom-control-indicator-checked-bg;\n        box-shadow: $form-radio-indicator-checked-box-shadow;\n      }\n    }\n\n    &:focus ~ label::before {\n      // the mixin is not used here to make sure there is feedback\n      box-shadow: $form-radio-indicator-focus-box-shadow;\n    }\n\n    &:active ~ label::before {\n      color: $custom-control-indicator-active-color;\n      background-color: $custom-control-indicator-active-bg;\n      box-shadow: $custom-control-indicator-active-box-shadow;\n    }\n\n    &:disabled {\n      ~ label {\n        cursor: not-allowed;\n\n        &::before {\n          background-color: $form-radio-indicator-disabled-bg;\n        }\n      }\n\n      ~ .description {\n        cursor: not-allowed;\n      }\n\n      &:checked ~ label {\n        &::before {\n          // background-color: $form-radio-indicator-checked-disabled-bg; // background-color: lighten($gray-700, 30%);\n          background: $form-radio-indicator-disabled-bg;\n          border-color: $border-color;\n        }\n\n        &::after {\n          background: $border-color;\n        }\n      }\n    }\n  }\n}\n\n.form-control-descenders {\n  .form-control-hint,\n  .form-control-required,\n  .form-control-error {\n    margin: 0 0 0.8rem 0;\n  }\n}\n\n@include form-validation-state('valid', $success);\n@include form-validation-state('invalid', $danger);\n","// stylelint-disable\n$white: #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #868e96 !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black: #000 !default;\n\n$grays: () !default;\n$grays: map-merge(\n  (\n    '100': $gray-100,\n    '200': $gray-200,\n    '300': $gray-300,\n    '400': $gray-400,\n    '500': $gray-500,\n    '600': $gray-600,\n    '700': $gray-700,\n    '800': $gray-800,\n    '900': $gray-900\n  ),\n  $grays\n);\n\n// The yiq lightness value that determines when the lightness of color changes from \"dark\" to \"light\". Acceptable values are between 0 and 255.\n$yiq-contrasted-threshold: 150 !default;\n\n// Customize the light and dark text colors for use in our YIQ color contrast function.\n$yiq-text-dark: $gray-900 !default;\n$yiq-text-light: $white !default;\n\n$font-weight-thin: 100;\n$font-weight-extralight: 200;\n$font-weight-light: 300;\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-bold: 700;\n\n@mixin letterspacing($units) {\n  letter-spacing: ($units/1000 * 1rem);\n}\n\n// Easings\n$ease-in-out-circ: cubic-bezier(0.27, 0.01, 0.38, 1.06);\n$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);\n\n// Transitions\n$transition-duration: 250ms;\n$transition-base: all $transition-duration $ease-in-out-circ !default;\n$transition-fade: opacity 200ms ease-in-out !default;\n$transition-collapse: height 350ms ease-in-out !default;\n\n@mixin transition($transition...) {\n  @if length($transition) == 0 {\n    transition: $transition-base;\n  } @else {\n    transition: $transition;\n  }\n}\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map-keys($breakpoints)\n) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n@mixin disabled-form-control {\n  cursor: not-allowed !important;\n  color: #c0c0c0;\n\n  * {\n    cursor: not-allowed !important;\n  }\n\n  label {\n    color: #c0c0c0;\n  }\n\n  input {\n    opacity: 0.5;\n  }\n}\n\n@mixin form-control-hint {\n  font-size: 0.75rem;\n  margin: 0.5rem;\n  color: $gray-500;\n}\n\n// Color contrast\n@function color-yiq($color) {\n  $r: red($color);\n  $g: green($color);\n  $b: blue($color);\n\n  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;\n\n  @if ($yiq >= 150) {\n    @return darken($color, 65);\n  } @else {\n    @return #fff;\n  }\n}\n\n@mixin border-top-radius($radius) {\n  border-top-left-radius: $radius;\n  border-top-right-radius: $radius;\n}\n\n@mixin border-right-radius($radius) {\n  border-top-right-radius: $radius;\n  border-bottom-right-radius: $radius;\n}\n\n@mixin border-bottom-radius($radius) {\n  border-bottom-right-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin border-left-radius($radius) {\n  border-top-left-radius: $radius;\n  border-bottom-left-radius: $radius;\n}\n\n@mixin text-truncate() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n@mixin hover {\n  @include hover-no-touch {\n    &:hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus {\n  @include hover-no-touch {\n    &:hover,\n    &:focus {\n      @content;\n    }\n  }\n}\n\n@mixin hover-focus-active {\n  @include hover-no-touch {\n    &:hover,\n    &:focus,\n    &:active {\n      @content;\n    }\n  }\n}\n\n@mixin hover-not-disabled {\n  @include hover-no-touch {\n    &:not([disabled]):not(.disabled):hover {\n      @content;\n    }\n  }\n}\n\n@mixin hover-no-touch {\n  @media (hover: hover) {\n    @content;\n  }\n}\n\n@import '../../styles/themes/talentPortal/tokens';\n\n$form-select-indicator-color: $gray-800 !default;\n$form-select-indicator: str-replace(\n  url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='#{$form-select-indicator-color}' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E\"),\n  '#',\n  '%23'\n) !default;\n$form-select-indicator-padding: 1.6rem !default; // Extra padding to account for the presence of the background-image based indicator\n$form-select-bg-size: 8px 10px !default; // In pixels because image dimensions\n\n.form-select {\n  appearance: none;\n  height: $form-control-height;\n  padding: $form-control-padding-y ($form-control-padding-x + $form-select-indicator-padding)\n    $form-control-padding-y $form-control-padding-x;\n  background: $form-control-bg $form-select-indicator no-repeat right $form-control-padding-x center;\n  background-size: $form-select-bg-size;\n\n  &:focus {\n    &::-ms-value {\n      // For visual consistency with other platforms/browsers,\n      // suppress the default white text on blue background highlight given to\n      // the selected option text when the (still closed) <select> receives focus\n      // in IE and (under certain conditions) Edge.\n      // See https://github.com/twbs/bootstrap/issues/19398.\n      // color: $input-color;\n      // background-color: $input-bg;\n    }\n  }\n\n  // &[multiple],\n  // &[size]:not([size=\"1\"]) {\n  //   padding-right: $form-select-padding-x;\n  // }\n}\n\n.form-select-sm {\n  @include small-form-control;\n}\n\n.form-select-lg {\n  @include large-form-control;\n}\n"],"mappings":";AA8SA;;ACDA;;AC2BA;;ACcA;;ACpCA;;ACgCA;;ACYA;;ACnDA;;AC2CA;;ACzBA;;ACuCA;;;;AC3CA;;ACDA;;ACFA;;;","sourceRoot":""}